* 环境搭建
** 安装
*** linux下安装
    因为adt的程序是基于swt的32位程序，而现在用的unbuntu或者centos一般都是64位的，所以需要安装32位兼容包
    如果出现错误那就是因为adb是32位的，要装ia32-libs。ubuntu下面是sudo apt-get install ia32-libs
    可是centos不行，centos是不能安装deb的，不过你可以解压deb后使用。
    在命令中打入
    yum install glibc.i686
    什么？你的不行吗？ 对，可能有的在打入这个命令时候没有glibc.i686。那怎么办呢，接下来复制下面这个长命令，然后输入执行：
    yum install alsa-lib-devel.i686 alsa-lib-devel audiofile-devel.i686 audiofile-devel cups-devel.i686 cups-devel dbus-devel.i686 dbus-devel fontconfig-devel.i686 fontconfig-devel freetype.i686 freetype-devel.i686 freetype-devel giflib-devel.i686 giflib-devel lcms-devel.i686 lcms-devel libICE-devel.i686 libICE-devel libjpeg-turbo-devel.i686 libjpeg-turbo-devel libpng-devel.i686 libpng-devel libSM-devel.i686 libSM-devel libusb-devel.i686 libusb-devel libX11-devel.i686 libX11-devel libXau-devel.i686 libXau-devel libXcomposite-devel.i686 libXcomposite-devel libXcursor-devel.i686 libXcursor-devel libXext-devel.i686 libXext-devel libXi-devel.i686 libXi-devel libXinerama-devel.i686 libXinerama-devel libxml2-devel.i686 libxml2-devel libXrandr-devel.i686 libXrandr-devel libXrender-devel.i686 libXrender-devel libxslt-devel.i686 libxslt-devel libXt-devel.i686 libXt-devel libXv-devel.i686 libXv-devel libXxf86vm-devel.i686 libXxf86vm-devel mesa-libGL-devel.i686 mesa-libGL-devel mesa-libGLU-devel.i686 mesa-libGLU-devel ncurses-devel.i686 ncurses-devel openldap-devel.i686 openldap-devel openssl-devel.i686 openssl-devel zlib-devel.i686 pkgconfig sane-backends-devel.i686 sane-backends-devel xorg-x11-proto-devel glibc-devel.i686 prelink fontforge flex bison libstdc++-devel.i686 pulseaudio-libs-devel.i686 gnutls-devel.i686 libgphoto2-devel.i686 openal-soft-devel openal-soft-devel.i686 isdn4k-utils-devel.i686 gsm-devel.i686 samba-winbind libv4l-devel.i686 cups-devel.i686 libtiff-devel.i686 gstreamer-devel.i686 gstreamer-plugins-base-devel.i686 gettext-devel.i686 libmpg123-devel.i686
*** 设置PATH
** 配置
** 签名
*** 概念
    Android系统约定所有应用程序都需先经过数字签名才能安装，不允许安装无可用数字签名的应用程序，
    无论是在模拟器还是真机上，Android系统都会在安装前检测数字签名的存在及其证书的有效期。
    如果应用程序的签名是在安装之后到期，则不会影响应用程序的正常使用。
    因此，我们在开发调试程序时，在程序安装到目标设备前，必须要对应用程序进行数字签名。
*** 签名和安装
    在开发Android程序时，系统会默认使用debug密钥自动给应用程序签名，该debug密钥在不同的机器上一般均不相同，
    所以，开发环境变化往往会导致签名变化（如果使用debug密钥），debug密钥只能做debug调试用途，程序发行时必须要使用独立的签名（证书）。
**** 签名密钥（证书）与发行包名变化可能有如下限定：
     签名相同，包名相同——安装时可覆盖安装
     签名不同，报名相同——Android认为版本发生了变化，需先卸载再安装
     签名不同，包名不同——Android认为版本发生了变化，需先卸载再安装
     使用debug签名的应用——无法在Android市场销售，而且，不同机器生成的debug密钥不同，不利apk升级和维护
     使用独立签名的应用——可在Android市场销售，签名固定会更加便利apk升级和维护
*** 生成签名
    keytool -v -genkey -keystore android.keystore -alias androiddebugkey -keyalg RSA -validity 20000
    密码:android，这个生成的是默认用于调试的debug keystore，idea和eclipse默认用此签名。
*** 查看签名
    keytool -list -keystore debug.keystore
* 反编译
*** apktool
    资源文件获取，可以提取出图片文件和布局文件进行使用查看
**** 地址
     http://ibotpeaches.github.io/Apktool/
**** 使用
     sh apktool.sh d wenxin.apk
*** dex2jar
    将apk反编译成java源码（classes.dex转化成jar文件）
**** 地址
     https://github.com/pxb1988/dex2jar
*** jd-gui
    查看APK中classes.dex转化成出的jar文件，即源码文件
**** 地址
     https://github.com/java-decompiler/jd-gui

* 系统组件
** Activity
   Activity概述
   字面意思为活动，可以从两方面来理解：从用户的角度看，Activity为用户提供了一个与之交互的画面，用来完成某一项任务。从软件系统的角度来看，每一个Activity都是一个相对独立的组件，它通常包含多个视图控件，并且通过这些控件与用户进行交互，来驱动整个程序的运行。
*** Activity生命周期
    常用
    onCreate
    onStart
    onPause
    onResume
    onStop
    onDestory
    特殊
    onActivityResult
    onConfigurationChanged
    onAttachWindow
*** Task
   Task可以看作一个Activity栈，在默认情况下，当前Activity开始时，新的Activity推入栈顶并获取焦点，上一个Activity仍然在栈中，当用户按下返回键时，当前Activity弹出栈并销毁，上一个Activity恢复。
   Task管理
*** Activity Manifest属性：
   alwaysRetainTaskState:
   如果Task 中根Activity 的此属性设为 "true" ，则默认的清理方式不会进行.即使过了很长一段时间,Task 中所有的Activity也还会保留在栈中.
   clearTaskOnLaunch:
   如果Task 中根Activity 的此属性设为 "true"，则只要用户离开并再次返回该 Task,栈就会被清理至根Activity。也就是说，正好与alwaysRetainTaskState相反.用户每次返回Task时看到的都是初始状态,即使只是离开一会儿.
   finishOnTaskLaunch
   此属性类似于clearTaskOnLaunch,只是它只对一个 Activity有效,不是整个Task.这能让任何一个Activity 消失,包括 根Activity.如果Activity 的此属性设为 "true"，则只会保留Task中当前session所涉及的内容.如果用户离开后再返回Task,它就不存在.
*** Intent Flag常量:
   FLAG_ACTIVITY_NEW_TASK
   在新的Task 中启动Activity.如果要启动的Activity 已经运行于某个Task 中,则那个Task 将调入前台中,最后保存的状态也将会恢复,Activity 将在onNewIntent()中接收到这个新 intent.
   这个模式与前一章节所描述述的"singleTask"launchMode模式相同.
   FLAG_ACTIVITY_SINGLE_TOP
   如果要启动的Activity 就是当前Activity（位于Back Stack 顶）,则已存在的实例将接收到一个onNewIntent()调用,而不是创建一个Activity 的新实例.
   这个模式与前一章节所述的 "singleTop"launchMode模式相同.
   FLAG_ACTIVITY_CLEAR_TOP
   如果要启动的Activity 已经在当前Task中运行,则不再启动一个新的实例，且所有在其上面的Activity 将被销毁，然后通过onNewIntent()传入 intent 并恢复Activity（不在栈顶）的运行.
   此种模式在launchMode中没有对应的属性值.
*** Activity四种launchMode
   1. standard(默认)
   "每次访问实例化新的Activity",系统在启动Activity 的Task 中创建一个新的Activity 实例,并且把 intent 传送路径指向它.该Activity 可以被实例化多次,各个实例可以属于不同的Task，一个Task 中也可以存在多个实例
   2. singleTop
   "每次访问,看栈顶元素目标对象,是则返回,不再实例化,否则,还是实例化新的Activity." 如果Activity的一个实例已经存在于当前Task的栈顶，该系统就会使用onNewIntent()方法通过intent 传递给已有实例，而不是创建一个新的Activity 实例.Activity 可以被实例化多次,各个实例可以属于不同的Task,一个Task中可以存在多个实例(但只有Back Stack的Activity 实例不是该Activity 的）
   应用：
   3. singleTask
   "保证activity实例化一次,单任务,由此所开启的活动和本活动位于同一task中" 系统将创建一个新的Task，并把Activity 实例作为根放入其中.但是，如果Activity 已经在其它Task 中存在实例，则系统会通过调用其实例的onNewIntent() 方法把 intent传给已有实例,而不是再创建一个新实例. 此 activity 同一时刻只能存在一个实例
   应用：
   4. singleInstance
   "保证Activity实例化一次,单实例,由此所开启的Activity在新的task中,和本活动id不一致." 除了系统不会把其它Activity 放入当前实例所在的 Task 之外，其它均与"singleTask"相同,Activity 总是它所在Task 的唯一成员；它所启动的任何Activity 都会放入其它Task 中
*** Activity其他
Home操作
相当于intent中放入FLAG_ACTIVITY_NEW_TASK|FLAG_ACTIVITY_RESET_IF_NEEDED

** Service
Service概述
字面意思为服务，可以从两方面来理解：从用户的角度看，Service为用户提供一个需要长时间运行的，并且大多数时间不需要和用户直接交互的任务，从软件系统的角度来看，Service为其他程序提供功能性支持。

** Broadcast

** ContentProvider

** Intent
   Intent在安卓中作为组件之间传输信息的媒介
** Manifest
** 线程
   Android中的Looper , Handler , Message的关系
   AsyncTask的原理和缺陷
   基于线程池+Hander
   在3.0以前，最大支持128个线程的并发，10个任务的等待。在3.0以后，无论有多少任务，都会在其内部单线程执行；
* 资源
** xml布局文件
*** tools命名空间
    tools命名空间及其属性用于帮助我们进行布局可视化调试。
    tools可以覆盖android所有标准属性，只在设计布局时可见，运行时会被忽略。
    比如用tools:text代表android:text，即可在可视化界面看到效果
*** tools:content
    是一个特殊的辅助属性，通常指向Activity，用于帮助可视化组件确定当前Activity使用的Theme
    比如tools:content="nomouse.module.MouduleActivity"，那么在manifest中的Activity设置了Theme后，
    可视化组件可以显示相应的效果
** 屏幕适配
*** px
    是英文单词pixel的缩写，意为像素，屏幕上的点。我们通常所说的分辨率如480X800就是指的像素。
    在设计领域中，像素是用来计算数码影像的最小单位。计算机中显示的图像并非连续的线条组成，而是由许多肉眼看不见的小点组成。如果把影像放大数倍，会发现这些连续色调其实是由许多色彩相近的小点所组成，这些小点就是构成影像的最小单位“像素”。由于是最小的独立显示单位，px均为整数，不会出现0.5px的情况。
*** in
    表示英寸，是屏幕的物理尺寸。每英寸等于2.54厘米。例如我们经常说的手机屏幕大小有，5（英）寸、4（英）寸就是指这个单位。这些尺寸是屏幕的对角线长度。如果手机的屏幕是4英寸，表示手机的屏幕（可视区域）对角线长度是4 X 2.54 = 10.16厘米。
*** dpi
    dpi是Dots Per Inch的缩写, 每英寸点数，即每英寸包含像素个数。比如320X480分辨率的手机，宽2英寸，高3英寸, 每英寸包含的像素点的数量为320/2=160dpi（横向）或480/3=160dpi（纵向），160就是这部手机的dpi，横向和纵向的这个值都是相同的，原因是大部分手机屏幕使用正方形的像素点。
*** density
    屏幕密度，density和dpi的关系为 density = dpi/160
*** dp
    也即dip，设备独立像素，device independent pixels的缩写，Android特有的单位，在屏幕密度dpi = 160屏幕上，1dp = 1px。
*** sp
    和dp很类似，一般用来设置字体大小，和dp的区别是它可以根据用户的字体大小偏好来缩放。
*** 安卓drawable
    drawable-ldpi (dpi=120, density=0.75)
    drawable-mdpi (dpi=160, density=1)
    drawable-hdpi (dpi=240, density=1.5)
    drawable-xhdpi (dpi=320, density=2)
    drawable-xxhdpi (dpi=480, density=3)
*** 安卓适配
    首先必须清楚一个自动渲染的概念，Android SDK会自动屏幕尺寸选择对应的资源文件进行渲染，
    如SDK检测到你手机dpi是160的话会优先到drawable-mdpi文件夹下找对应的图片资源，注意只是优先，
    假设你手机dpi是160，但是你只在xhpdi文件夹下有对应的图片资源文件，程序一样可以正常运行。
    所以理论上来说只需要提供一种规格的图片资源就ok了，如果只提供ldpi规格的图片，对于大分辨率的手机如果把图片放大就会不清晰，
    所以需要提供一套你需要支持的最大dpi的图片，这样即使用户的手机分辨率很小，这样图片缩小依然很清晰。

    在现在的App开发中，基本都会有iOS和Android版本，有些公司为了保持App不同版本的体验交互一致，还有些公司的设计资源可能比较紧张，这些情况下iOS和Android版本基本是一个设计师主导，而大多数情况下设计师可能更会以iPhone手机为基础进行设计，包括后期的切图之类的。
    这个时候身为Android开发人员你是否还要求设计师单独为Android端切一套图片资源呢？这会让你们的设计师崩溃的，下面就来告诉一个项目中总结的更棒的方法。
    相信设计师们一般都会用最新的iPhone5（5s和5的尺寸以及分辨率都一样）来做原型设计，而iPhone5的屏幕分辨率为640X1164, 屏幕尺寸为4英寸，
    根据勾股定理(a^2 + b^2 = c^2)640^2+1164^2=1764496, 然后再对其开根号可求出屏幕对角线的分辨率为：1328，
    除以4可得出iphone5的dpi：1328/4≈332 可以看出iPhone5的屏幕的dpi约等于320, 刚好属于xhdpi，
    所以你可以很自豪的像你们的设计师说不用专门为Android端切图，直接把iPhone的那一套切好的图片资源放入drawable-xhdpi文件夹里就ok了。

    iPhone6s plus尺寸为5.5英寸，1920x1080，对角线2202，dpi约等于400
    iPhone6s尺寸为4.7英寸，1334x750，对角线1530，dpi约等于320
** theme
   theme类似于css的作用，为所有布局提供整体设置，可以通过在Application中设置相应的Theme来控制所有Activity的样式。
*** 解决Activity跳转出现黑屏的问题
    在manifest文件中的对应Activity节点设置:
    Android:theme="@android:style/Theme.Translucent.NoTitleBar.Fullscreen"
* UI
** LinearLayout
   1. weight，通常会将weight所在的组件的height或者width设置为0再去
   2. 父布局用gravity来标识子控件位置，子控件也可以通过layout_gravity来标识自己在父布局的位置
** RelativeLayout
   1. 子布局中可以使用android:layout_centerInParent="true"、android:layout_centerVertical="true"、android:layout_centerHorizontal="true"三个属性来标识绝对居中、垂直居中和水平居中，而不是使用layout_gravity,父布局使用gravity没有意义
** FrameLayout
   1. 子布局中通过使用layout_gravity来标识相对父布局的位置,父布局使用gravity没有意义
** GridView
   1. 直接在GridView中设置 android:gravity="center"这个属性是不起作用的。要在你adapter中的布局文件中设置android:layout_gravity="center"才有效。
   2. android:listSelector="@drawable/bg"//该属性很重要，如果不设置的话，GridView控件会自带自己的选中样式(黄色边框)，如图所示：做项目一般是不需要这个的。所以解决办法是将GridView的android:listSelector属性设置为和Activity背景相同即可。
   3. 配置
   android:verticalSpacing="10dp"  //行间距
   android:horizontalSpacing="10dip"  //列间距
   android:numColumns="3"  //列数
   android:stretchMode="columnWidth"  //列可扩展
   以上列数为3，若想在高分辨率中列数设置为4怎么办呢。首先，需要在属性中设置列为可扩展android:stretchMode="columnWidth"。然后在代码中做个判断：
   if(Metrics.heightPixels == 1280 && Metrics.widthPixels == 800){
   gridview.setNumColumns(4);
   }
   这样GridView的列数是可以随分辨率不同而做更多的设置。
   4. Grid Item居中，要在子布局的根节点中设置layout_gravity=center
** ImageView
*** ScaleType
    1. ScaleType.CENTER：：图片大小为原始大小，如果图片大小大于ImageView控件，则截取图片中间部分，若小于，则直接将图片居中显示。
    2. ScaleType.CENTER_CROP：将图片等比例缩放，让图像的短边与ImageView的边长度相同，即不能留有空白，缩放后截取中间部分进行显示。
    3. ScaleType.CENTER_INSIDE：将图片大小大于ImageView的图片进行等比例缩小，直到整幅图能够居中显示在ImageView中，小于ImageView的图片不变，直接居中显示。
    4. ScaleType.FIT_CENTER：ImageView的默认状态，大图等比例缩小，使整幅图能够居中显示在ImageView中，小图等比例放大，同样要整体居中显示在ImageView中。
    5. ScaleType.FIT_END：缩放方式同FIT_CENTER，只是将图片显示在右方或下方，而不是居中。
    6. ScaleType.FIT_START：缩放方式同FIT_CENTER，只是将图片显示在左方或上方，而不是居中。
    7. ScaleType.FIT_XY：将图片非等比例缩放到大小与ImageView相同。
    8. ScaleType.MATRIX：是根据一个3x3的矩阵对其中图片进行缩放
* 动画和图像
** View Animation（Tween Animation）补间动画
   给出两个关键帧，通过一些算法将给定属性值在给定的时间内在两个关键帧间渐变。包含4种效果：<alpha>透明度,<scale>缩放,<translate>位移,<rotate>反转，此动画不会改变View的实际属性，即View的外型发生
** Drawable Animation（Frame Animation）帧动画
   就像GIF图片，通过一系列Drawable依次显示来模拟动画的效果。
** Property Animation 属性动画
   与View Animation的最大区别是属性动画会改变View的实际属性。
* 常见问题
** 应用方法数不能超过65536的问题
*** 原因
    是由于 dex 文件格式的限制而引起的这个问题。我们项目中的每一个方法，在编译过后在dex文件中都会有一个与之相对应的方法 id，而 dex 文件中存储方法 id 用的是 short 类型数据，
    java 中 short 是两个字节大小，所以这就限制了一个 dex 文件中最多只能存储2^16个（unsigned short）
*** 解决方法
    1. 在gradle中引入multidex类
dependencies {
  compile 'com.android.support:multidex:1.0.0'
}
    2. 在AndroidManifest.xml 中声明 MultiDexApplication
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.android.multidex.myapplication">
    <application
        ...
        android:name="android.support.multidex.MultiDexApplication">
        ...
    </application>
</manifest>
     3. 如果自己已经实现类Applicaiton类，重写attachBaseContext方法
@Override
protected void attachBaseContext(Context base) {
    super.attachBaseContext(base);
    MultiDex.install(this);
}

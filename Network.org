* 基础
** host
   hostname 查看主机名
   /etc/sysconfig/network 修改主机名
** ifconfig 查询设定网卡与网络配置
   ifconfig 查看网卡信息
   /etc/sysconfig/network-script/ifcfg-eth0  此文件代表网卡eth0的配置文件
   ifconfig eth0 up 激活eth0网卡
   ifup eth0
   ifconfig eth0 down 禁用eth0网卡
   ifdown eth0
   service network restart 重启网络服务
   ifconfig eth0:1 192.168.0.10 broadcast 192.168.0.255  Mask:255.255.255.0 添加虚拟ip
   route add host 192.168.0.10 dev eth0:1 添加路由
** iptables 防火墙
*** 防火墙配置文件
    /etc/sysconfig/iptables
    默认如下：
    # Generated by iptables-save v1.4.7 on Wed Jan 28 09:33:04 2015
    *filter
    :INPUT ACCEPT [0:0]
    :FORWARD ACCEPT [0:0]
    :OUTPUT ACCEPT [483:59866]
    -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
    -A INPUT -p icmp -j ACCEPT
    -A INPUT -i lo -j ACCEPT
    -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
    -A INPUT -j REJECT --reject-with icmp-host-prohibited
    -A FORWARD -j REJECT --reject-with icmp-host-prohibited
*** 查看本机防火墙设置
    iptables -L -n
*** 清除防火墙规则
    iptables -F
*** 查看防火墙设置
    vi /etc/sysconfig/iptables
*** 开放某个端口
    iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT
    iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT
    service iptables save
*** 关闭防火墙
    暂时:service iptables stop
    永久:chkconfig iptables off
** netstat 显示网络连接状态
   netstate -naoltp | grep [PORT]  查看端口占用
   netstate -rn     查看路由
** route
   添加默认网关
   route add default gw 192.168.1.1
** ethx 
   配置eth0的IP地址， 同时激活该设备
   eth0 192.168.1.10 netmask 255.255.255.0 up
** DNS配置
   配置DNS vi /etc/resolv.conf
   添加内容:
   　　nameserver 202.96.134.133
   　　nameserver 202.96.128.68
   　　nameserver 202.96.128.166
   查看DNS
   　　less /etc/resolv.conf
** 单网卡单ip
*** RedHat系列
   vi /etc/sysconfig/network-scripts/ifcfg-eth[x]文件([x]为使用的网卡)
   静态配置
   # xxxxxxx(网卡名称，不用改)
   DEVICE=eth0
   BOOTPROTO=static
   TYPE=ether
   HWADDR=xx:xx:xx:xx:xx:xx (网卡mac地址，不用改)
   IPADDR=x.x.x.x(ip地址)
   NETMASK=x.x.x.x(子网掩码)
   BROADCAST=x.x.x.x.(广播地址)
   NETWORK=x.x.x.x(网络地址)
   GATEWAY=x.x.x.x(网关地址)
   ONBOOT=yes(开机自启动)
   DNS1=x.x.x.x(域名服务器地址)
   DNS2=x.x.x.x
   注意：ONBOOT一定要设置为yes，否则可能出现下述症状，eth0未弹出：
   动态配置
   # xxxxxxx(网卡名称，不用改)
   DEVICE=eth0
   BOOTPROTO=dhcp
   TYPE=ether
   HWADDR=xx:xx:xx:xx:xx:xx (网卡mac地址，不用改)
   ONBOOT=yes(开机自启动)
*** Ubuntu系列
   vi /etc/network/interfaces
   # The loopback network interface (配置环回口)
   　　auto lo # 开机自动激lo接口
   　　iface lo inet loopback # 配置lo接口为环回口
   　　# The primary network interface #配置主网络接口
   　　auto eth0 #开机自动激活eth0接口
   　　iface eth0 inet dhcp #配置eth0接口为DHCP自动获取
   #或者配置eth0为静态地址
   　　# The primary network interface (配置主网络接口)
   　　auto eth0 #开机自动激活eth0接口
   　　iface eth0 inet static #配置eth0接口为静态地址
   　　address 192.168.1.10
   　　gateway 192.168.1.254
   　　Netmask 255.255.255.0
   　　network 192.168.1.0
   　　broadcast 192.168.1.255
** 单网卡多ip
   直接用命令行，各系统通用，但是是暂时性的
   ifconfig eth0:0 192.168.0.1 netmask 255.255.255.0 up
*** RadHat系列
   仿照/etc/sysconfig/network-scripts/ifcfg-eth0增加一文件根据网络虚拟接口的名字进行命名
   例如ifcfg-eth0:0或者ifcfg-eth0:1等等
   #下边看下ifcfg-eth0:0文件里面的配置信息
   DEVICE=eth0:0 #网络虚拟接口eth0:0
   ONBOOT=yes #启动的时候激活
   BOOTPROTO=static #使用静态ip地址
   IPADDR=192.168.0.1 #分配ip地址
   NETMASK=255.255.255.0 #子网掩码
   其他配置文件类似。
   重启网络服务
   service network restart
*** Ubuntu系列
   直接在/etc/network/interfaces文件里添加内容
   auto eth0:0
   iface eth0:0 inet static
   name Ethernet Lan card
   address 192.168.0.2
   netmask 255.255.255.0
   network 192.168.0.0
   broadcast 192.168.0.255
   #gateway 192.168.0.254
* 协议
** 7层模型
数据的封装过程：
1.data
2.segment
3.packet
4.frame
5.bit
对应的协议：
1.application-session （Represen layer is in the middle) layer
2.transprot layer
3.network layer
4.data link layer
5.physical layer
** tcp
*** 协议格式
  TCP的包是没有IP地址的，那是IP层上的事。但是有源端口和目标端口。
一个TCP连接需要四个元组来表示是同一个连接（src_ip, src_port, dst_ip, dst_port）准确说是五元组，还有一个是协议。但因为这里只是说TCP协议，所以，这里我只说四元组。
注意上图中的四个非常重要的东西：
Sequence Number是包的序号，用来解决网络包乱序（reordering）问题。
Acknowledgement Number就是ACK——用于确认收到，用来解决不丢包的问题。
Window又叫Advertised-Window，也就是著名的滑动窗口（Sliding Window），用于解决流控的。
TCP Flag ，也就是包的类型，主要是用于操控TCP的状态机的。
*** tcp握手
** http
** https
   http经过tcp3次握手就可以发送信息了，而https在tcp握手之后还有一个ssl握手,以下是如何测试http和https的耗时
   curl -w "TCP handshake: %{time_connect}, SSL handshake: %{time_appconnect}\n" -so /dev/null https://www.alipay.com
* 高级
** dig DNS查询
** tracert 路由追踪
** ethtool 确定网口位置
   ---工具ethtool
   (1)ethtool DEVNAME   查看相应设备名称对应的设备信息 example：ethtool eth0
   最后一行会显示Link detected: yes/no
   (2)ethtool -p DEVNAME   查看相应设备名称对应的设备位置  example: ethtool –p eth0
   回车后与eth0 相对应的网卡接口旁边的指示灯就会闪烁，这样你就能很快确定eth0 网口的位置啦。（按下Ctrl+C 结束命令，停止闪烁）
   管理网络连接的方案：
   （1）/etc/network/interfaces（/etc/init.d/networking）
   （2）Network-Manager
   两套方案是冲突的，不能同时共存。
   第一个方案适用于没有X的环境，如：服务器；或者那些完全不需要改动连接的场合。
   第二套方案使用于有桌面的环境，特别是笔记本，搬来搬去，网络连接情况随时会变的。
   －－－－－－－－－－－－－
   他们两个为了避免冲突，又能共享配置，就有了下面的解决方案：
   1、当Network-Manager发现/etc/network/interfaces被改动的时候，则关闭自己（显示为未托管），除非managed设置成真。
   2、当managed设置成真时，/etc/network/interfaces，则不生效。
   如果想在命令行下配置网络，可能需要关闭NetworkManager服务，打开network服务，以root权限执行
   chkconfig --level 2345 NetworkManager off
   chkconfig --level 2345 network on
   service NetworkManager stop
   service network start
** iftop 检测网络带宽使用
* 网络安全
** arp
** ddos


* 流控系统
** 定义
最常用的场景下，流控是为了保护下游有限的资源不被流量冲垮，保证服务的可用性，一般允许流控的阈值有一定的弹性，偶尔的超量访问是可以接受的
有的时候，流控服务于收费模式，比如某些云厂商会对调用API的频次进行计费。既然涉及到钱，一般就不允许有超出阈值的调用量。
** 设计

** 原则


** 固定窗口
*** 原理
流控是为了限制指定时间间隔内能够允许的访问量，因此，最直观的思路就是基于一个给定的时间窗口，
维护一个计数器用于统计访问次数，然后实现以下规则：
1.如果访问次数小于阈值，则代表允许访问，访问次数+1；
2.如果访问次数超出阈值，则限制访问，访问次数不增；
3.如果超过了时间窗口，计数器清零，并重置清零后的首次成功访问时间为当前时间。这样就确保计数器统计的是最近一个窗口的访问量；
*** 多线程
不过这样其实并不真正”安全“，设想以下的场景，两个线程A、线程B前后脚尝试获取配额，#1位置的判断条件满足后，
会同时走到#2位置修改lastReqTime值，线程B的赋值会覆盖线程A，导致时间窗口起始点向后偏移。
同样的，位置#3和#4也会构成竞争条件。当然如果对流控的精度要求不高，这种竞争也是能接受的。
*** 问题
简单窗口的流控实现非常简单，以1分钟允许100次访问为例，如果流量均匀保持200次/分钟的访问速率
但如果流量并不均匀，假设在时间窗口开始时刻0:00有几次零星的访问，一直到0:50时刻，开始以10次/秒的速度请求，
在临界的20秒内（0:50~1:10）系统承受的实际访问量是200次，换句话说，最坏的情况下，在窗口临界点附近系统会承受2倍的流量冲击，这就是简单窗口不能解决的临界突变问题。

** 滑动窗口
简单窗口算法的临界突变问题，可以通过把整个大的时间窗口切分成更细粒度的子窗口每个子窗口独立统计来解决。
*** 原理
将一分钟的时间窗口切分成6个子窗口，每个子窗口维护一个独立的计数器用于统计10秒内的访问量，每经过10s，时间窗口向右滑动一格。
*** 指标
如果0:50到1:00时刻（对应灰色的格子）进来了100次请求，接下来1:00~1:10的100次请求会落到黄色的格子中，
由于算法统计的是6个子窗口的访问量总和，这时候总和超过设定的阈值100，就会拒绝后面的这100次请求。
*** 问题
滑动窗口算法能否精准地控制任意给定时间窗口T内的访问量不大于N？
答案是否定的，还是将1分钟分成6个10秒大小的子窗口的例子，假设请求的速率现在是20次/秒，从0:05时刻开始进入，
那么在0:05~0:10时间段内会放进100个请求，同时接下来的请求都会被限流，直到1:00时刻窗口滑动，在1:00~1:05时刻继续放进100个请求。
如果把0:05~1:05看作是1分钟的时间窗口，那么这个窗口内实际的请求量是200，超出了给定的阈值100。
如果要追求更高的精度，理论上只需要把滑动窗口切分得更细。像Sentinel中就可以通过修改单位时间内的采样数量sampleCount值来设置精度，
这个值一般根据业务的需求来定，以达到在精度和内存消耗之间的平衡。

** 漏桶
滑动窗口无法很好地解决平滑度问题，再回过头看我们对于平滑度的诉求，
*** 要求
当流量超过一定范围后，我们想要的效果不是一下子切断流量，而是将流量控制在系统能承受的一定的速度内。
*** 原理
假设平均访问速率为v, 那我们要做的流控其实是流速控制，即控制平均访问速率v ≤ N / T。

在网络通信中常常用到漏通算法来实现流量整形。漏桶算法的思路就是基于流速来做控制。
想象一下上学时经常做的水池一边抽水一边注水的应用题，把水池换成水桶（还是底下有洞一注水就开始漏的那种），
把请求看作是往桶里注水，桶底漏出的水代表离开缓冲区被服务器处理的请求，桶口溢出的水代表被丢弃的请求。
在概念上类比：
最大允许请求数N：桶的大小
时间窗口大小T：一整桶水漏完的时间
最大访问速率V：一整桶水漏完的速度，即N / T
请求被限流：桶注水的速度比漏水的速度快，最终导致桶内水溢出
*** 指标
假设起始时刻桶是空的，每次访问都会往桶里注入一单位体积的水量，那么当我们以小于等于N/T的速度往桶里注水时,
桶内的水就永远不会溢出。反之，一旦实际注水速度超过漏水速度, 桶里就会产生越来越多的积水，直到溢出为止。
同时漏水的速度永远被控制在N/T以内，这就实现了平滑流量的目的。
*** 问题
漏桶的优势在于能够平滑流量，如果流量不是均匀的，那么漏桶算法与滑动窗口算法一样无法做到真正的精确控制。
极端情况下，漏桶在时间窗口 T 内也会放进相当于2倍阈值N的流量。

** 令牌桶
漏桶模型中，请求来了是往桶里注水，如果反一下，把请求放行变成从桶里抽水，对应的，把注水看作是补充系统可承受流量的话，漏桶模型就变成了令牌桶模型。
*** 原理
令牌桶算法的原理是系统以恒定的速率产生令牌，然后把令牌放到令牌桶中，令牌桶有一个容量，当令牌桶满了的时候，
再向其中放令牌，那么多余的令牌会被丢弃；当想要处理一个请求的时候，需要从令牌桶中取出一个令牌，如果此时令牌桶中没有令牌，那么则拒绝该请求。
*** 指标
*** 问题

** 漏桶、令牌桶的区别
漏桶：用于控制网络中的速率。在该算法中，输入速率可以变化，但输出速率保持恒定。常常配合一个FIFO队列使用。
想象一下，漏桶的破洞是固定大小的，因此漏水的速率是可以保持恒定的。
令牌桶：按照固定速率往桶中添加令牌，允许输出速率根据突发大小而变化。
一个系统限制60秒内的最大访问量是60次，换算速率是1次/秒，如果在一段时间内没有访问量，那么对漏桶而言此刻是空的。
现在，一瞬间涌入60个请求，那么流量整形后，漏桶会以每秒1个请求的速度，花上1分钟将60个请求漏给下游。
换成令牌桶的话，则是从令牌桶中一次性取走60个令牌，一下子塞给下游。

令牌桶可以用来保护自己，主要用来对调用者频率进行限流，为的是让自己不被打垮。
所以如果自己本身有处理能力的时候，如果流量突发（实际消费能力强于配置的流量限制），那么实际处理速率可以超过配置的限制。
而漏桶算法，这是用来保护他人，也就是保护他所调用的系统。主要场景是，当调用的第三方系统本身没有保护机制，
或者有流量限制的时候，我们的调用速度不能超过他的限制，由于我们不能更改第三方系统，所以只有在主调方控制。
这个时候，即使流量突发，也必须舍弃。因为消费能力是第三方决定的。
总结起来：如果要让自己的系统不被打垮，用令牌桶。如果保证被别人的系统不被打垮，用漏桶算法。

*** 滑动日志
一般情况下，上述的算法已经能很好地用于大部分实际应用场景了，很少有场景需要真正完全精确的控制（即任意给定时间窗口T内请求量不大于 N ）。
如果要精确控制的话，我们需要记录每一次用户请求日志，当每次流控判断时，取出最近时间窗口内的日志数，看是否大于流控阈值。这就是滑动日志的算法思路。
设想某一个时刻 t 有一个请求，要判断是否允许，我们要看的其实是过去 t - N 时间段内是否有大于等于 N 个请求被放行，因此只要系统维护一个队列q，里面记录每一个请求的时间，理论上就可以计算出从 t - N 时刻开始的请求数。
考虑到只需关心当前时间之前最长T时间内的记录，因此队列q的长度可以动态变化，并且队列中最多只记录N条访问，因此队列长度的最大值为N

** 分布式流控
现实中的应用服务往往是分布式部署的，如果共用的资源（例如数据库）或者依赖的下游服务有流量限制，那么分布式流控就要派上用场了。
虽然可以给每台应用服务器平均分配流控配额，把问题转换为单机流控，但如果碰到流量不均匀、机器宕机、临时扩缩容等场景，这种做法的效果不佳。
分布式环境下做流控的核心算法思路其实与单机流控是一致的，区别在于需要实现一种同步机制来保证全局配额。
同步机制的实现可以有中心化和去中心化两种思路：
*** 中心化：配额由一个中心系统统一管控，应用进程通过向中心系统申请的方式获取流控配额。
状态的一致性在中心系统维护，实现简单；
中心系统节点的不可用会导致流控出错，需要有额外的保护。例如，中心化流控在中心存储不可用时，往往会退化为单机流控；
*** 去中心化：应用进程独立保存和维护流控配额状态，集群内周期性异步通讯以保持状态一致。
相比中心化方案，去中心化方案能够降低中心化单点可靠性带来的影响，但实现上比较复杂，状态的一致性难以保证；在CAP中去中心化更加倾向于A而中心化更倾向于C；

** Redis实现分布式流控
*** 固定窗口
*** 滑动窗口
*** 令牌桶
以令牌桶为例，在实现上，可以用两个key分别存储每个用户的可用token数和上次请求时间，另一种可能更好的办法是使用Redis的hash数据结构。
下图的示例是一个用户user_1当前在redis中保存的流控配额数据：令牌桶中当前剩余2个token，最近一次访问的时间戳是1490868000。
当收到一个新请求时，Redis客户端要执行的操作与我们在单机流控算法中看到的一样。首先，从对应hash中获得当前配额数据（HGETALL），
根据当前时间戳、上次请求的时间戳和token填充速度计算要填充的token数；然后，判断是否放行，更新新的时间戳和token数（HMSET）。
*** 滑动日志
每个用户有一个对应的Sorted Set记录请求日志；
其中每个元素的key和value可以是相同的，即请求的时间戳；
Sorted Set可以根据时间窗口大小设置有效期，比如时间窗口为1s时设置过期时间5s，在请求量不大时可以节省Redis服务器内存；
当收到一个新的用户请求时，首先通过ZREMRANGEBYSCORE命令删除Sorted Set中过期的元素，这里的过期即请求时间戳t < 当前时间戳now - 时间窗口大小interval；
使用ZADD将当前请求添加到Set中；
使用ZCOUNT获取当前剩余Set大小，判断是否需要流控；



** 未来
根据实际诉求，合理搭配不同层的多级流控是个不错的方式，尽量把流量拦在外层。例如常见的接口层Nginx流控+应用层流控。
选择一个合适的缓存系统保存流控的动态数据，这个一般跟着公司的统一技术架构走，像集团内一般就选择Tair/Redis了（否则就要考虑单独运维的开销了）。
将流控的静态配置放到配置中心（例如Diamond）。
设计时要考虑分布式流控不可用的情况（例如缓存挂掉），必要时切到单机流控，使用Sentinel成熟可靠。
很多时候对精度的要求没那么高，因为一般都会允许一定的突发量。这时候可以做一些性能的优化。
性能的最大瓶颈在于每次请求都会访问一次缓存，我之前在设计时就采用了一种折中的办法：
将可用配额的一部分，按一定比例（例如50%），先预分配给集群内的机器。
一般是平均分配，如果预先就已经知道每台机器的流量权重，可以加权分配。
每台机器消耗配额的速率不同，中间也可能有机器宕机，可能有扩缩容，因此预分配的比例不宜太大，当然也不宜太小。
每台机器在配额耗尽前，使用本地计数做流控，因此性能能够得到保障。与此同时，可以异步地将计数聚合后提交给中心存储（例如redis），聚合提交的频率按实际的精度需求做控制。
每台机器在配额耗尽时，向中心系统请求配额，这里的一个优化点是每台机器会记录自身配额消耗的速率（等同于承受的流量速率），按照速率大小申请不同大小的配额，消耗速率大则一次性申请更多。
在整体可用配额不足一定比例时（例如10%），限制每台机器一次可申请的配额数，按剩余窗口大小计算发放配额的大小，并且每次发放量不超过剩余配额的一定比例（例如50%），使得剩余的流量能够平滑地过渡。



** 业务方案
*** Guava RateLimiter
*** Sentinel
**** 原理
sentinel主要采用滑动窗口计数
*** Hystrix

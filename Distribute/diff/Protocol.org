* 概述
Protocol协议，这里具体指基于TCP之上的7层应用层协议
** 为什么要有协议？
请求在发送到网络中之前，他需要把方法调用的请求参数转成二进制；转成二进制后，写入本地Socket中，然后被网卡发送到网络设备中。
但在传输过程中，所有二进制数据并非整体一下子发送到对端机器上，中间可能会拆分成好几个数据包，也可能会合并其他请求的数据包（合并的前提是同一个TCP连接上的数据），至于怎么拆分合并，这其中的细节会涉及到系统参数配置和TCP窗口大小。
对于服务提供方应用来说，他会从TCP通道里面收到很多的二进制数据，那这时候怎么识别出哪些二进制是第一个请求的呢？
同理在RPC传输数据的时候，为了能准确地“断句”，我们也必须在应用发送请求的数据包里面加入“句号”，这样才能帮我们的接收方应用从数据流里面分割出正确的数据。这个数据包里面的句号就是消息的边界，用于标示请求数据的结束位置。
举个具体例子，调用方发送 AB、CD、EF 3 个消息，如果没有边界的话，接收端就可能收到ABCDEF或者ABC、DEF 这样的消息，这就会导致接收的语义跟发送的时候不一致了。
* 协议的设计
** Http
协议头+协议体

｜Bit Offset | 0-15       | 16-47   | 48 -63 | 64-71   | 72-79  | 80-87    | 88-103 ｜不固定     ｜ 协议体
｜0          ｜ 魔术位     ｜ 整体长度 ｜ 头长度 ｜ 协议版本 ｜ 消息类型｜序列化方式 ｜ 消息ID  ｜协议头扩展 ｜  Payload





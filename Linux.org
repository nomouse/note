* 系统管理
** 查看系统信息
   cat /etc/issue
   uname -a
   free -m 内存大小M
   cat /proc/cpuinfo CPU信息
   cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c  CPU多少逻辑核心
   cat /proc/cpuinfo | grep physical | uniq -c  CPU多少物理核心
   getconf LONG_BIT 服务器运行在64位还是32位核心下
   dmidecode | grep "Product Name" 机器型号
   dmesg | grep -i eth 网卡信息
   ethtool eth0 查看网络带宽
** ntpdate 时间同步
    ntpdate time.nist.gov  将Internet时间同步到系统时间
*** 时间服务器
    ntp.fudan.edu.cn
*** 服务器时间同步
    yum install -y ntp
    ntpdate -u pool.ntp.org
    date
** hwclock 修改BIO时间
    hwclock                显示BIOS时间
    hwclock -w             将当前系统时间同步到BIOS时间
** ps  显示当前正在运行的进程
   -e 显示所有进程
   -f 输出所有信息
   ps -aux 列出详细信息
** netstat 显示网络状态 
   netstat -anp
** top 显示任务管理器，查看各个进程的CPU和内存占用率
   进入top后按shirt+h切换到查看线程占用
** df  显示当前的磁盘空间
   -h 用M或者G为单位来显示，1024M = 1G
   -H 用M或者G为单位来显示，1000M = 1G
   -l 列出本地磁盘信息
   -T 显示文件系统类型
   例子：
   df -TH 显示系统现有磁盘使用情况
** du  显示文件或者文件夹的磁盘空间
   -h 用M或者G为单位来显示
   --max-depth=1 查看文件夹最大深度
   du -h --max-depth=1 work/testing	
** strace 跟踪进程执行时的系统调用和所接收的信号
   strace -o output.txt -T -tt -e trace=all -p 28979
** gdb 程序调试工
* 文件管理
** yum
   yum search mysql
   yum install mysql-5.5.39-x86_64
   yum -y reomve mysql*
** rpm
   rpm -qa |grep mysql
   rpm -ivh mysql-5.5.39-x86_64.rpm
   rpm -e --nodeps mysql-lib
** find 全文检索
   find [PATH] -name [NAME]
** ls 显示当前目录下文件夹
   -h 文件大小可读
   -a 显示所有文件和文件夹
   -n 
   -o 显示文件的除组信息外的详细信息
** ll 以目录形式显示目录下文件夹啊 
** cd 进入某个目录
   cd .. 进入上一层目录
   cd /  进入根目录
** rm 删除文件或者文件夹
   -r 递归删除（用于删除文件夹）
   -f 强制删除
   rm -rf tomcat 删除tomcat目录
** cp 复制文件或者文件夹
   -f 强行覆盖已有目录或者文件
   -r 递归复制（用于复制文件夹）
** mv 移动文件或者文件夹
   -f 强行移动
** tar 解压缩工具
   命令：tar [OPTION]... [FILE]
   -x 代表解压缩
   -c 代表压缩
   -t 代表查看内容，三者同时只能存在其一
   -r 在压缩包中追加文件
   -u 更新压缩包中的文件

   z 代表gzip文件
   j 代表bzip2压缩

   v 解压缩过程中显示文件

   f 代表需要操作哪个文件，后面必须立即接文件
   -C [dir] 改变工作目录，例如将一个压缩文件解压为另外一个文件夹，必须放置在末尾

   例子：
   tar -zvxf jdk-1.6.tar.gz -C /opt/nomouse 解压gzip格式
   tar -jxf jdk.tar.bz2 解压bz2格式
   tar -czf jdk.tar.gz /opt/jdk1.6 生成压缩文件
** find 查找文件或者文件夹
   find [PATH] -name [NAME] -type d
   -name [文件名]查找相应文件夹
** cat 文本输出
   命令：cat [OPTION]... [FILE]...
   例子：
   cat /etc/profile 输出整个文件，无法翻页
   cat tail catalina.out 查看当前日志输出，会不停的刷新
** head 显示一个文件的前几行
** tail 显示一个文件的后几行
   命令：tail [OPTION]... [FILE]...
   例子：
   tail 10 /etc/profile 显示最后10行
* 用户管理
** /etc/group 所有组
** /etc/shadow 所有用户密码
** /etc/passwd 所有用户
** passwd 修改密码

** chmod 操作文件权限，777是全部权限
   -R 递归执行

* Shell/Bash
** pwd
** date
   `date +%Y%m%d-%H%M%S`
   20150122-152059
* 高级工具
** iftop 检测网络带宽使用
** fdisk 硬盘分区
*** 硬盘常识
    IDE硬盘在LINUX中的设备名一般为/dev/hda,/dev/hdb,/dev/hdc...
    SCSI硬盘在LINUX中的设备名一般为/dev/sda,/dev/sdb,/dev/sdc...
    一个硬盘最多分为4个主分区，这是由硬盘引导区MBR决定的，扩展分区只能由一个，在扩展分区上可以任意划分逻辑分区
*** 分区过程
    1. 查看硬盘是否安装正常,fdisk -l
    2. 当硬盘小于2T时，可以用fdiks，否则采用parted
    3. 格式化分区，mkfs.ext4 /dev/sdb1
    4. 手动挂载分区 mkdir /data，mount /dev/sdb1 /data
    5. 自动挂载分区 修改/etc/fstab，添加如下一行:
       /dev/sdb5   /sdb5  ext4   defaults    0  0
** lvm 逻辑卷管理
*** 概念
** cron 定时任务调度
*** crond服务
     cron 是一个可以用来根据时间、日期、月份、星期的组合来调度对重复任务的执行的守护进程。
     检查是否安装和运行：service crond status
     启动：service crond start
     停止：service crond stop
     查看定时任务执行情况: tail -f /var/log/cron
*** crontab命令
     查看root用户的个人定时任务：crontab -u root -l
     编辑当前用户的个人定时任务：crontab -e 
*** 配置cron定时任务
     cron 涉及到一些配置文件和文件夹，包括：
     /etc/crontab       cron全局配置文件，放置全局定时任务 
     /etc/cron.deny     该文件中所列的用户不允许使用crontab命令 
     /etc/cron.allow    该文件中所列的用户允许使用crontab命令 
     /var/spool/cron/   cron个人配置文件夹，下面存放许多以用户名命名的文件，记录每个用户设置的cron任务(即crontab命令设置)

     /etc/cron.hourly/  存放小时单位的定时任务
     /etc/cron.daily/
     /etc/cron.weekly/
     /etc/cron.monthly/
*** 配置cron任务
     SHELL=/bin/bash
     PATH=/sbin:/bin:/usr/sbin:/usr/bin
     MAILTO=root
     HOME=/
     
     # run-parts
     01 * * * * root run-parts /etc/cron.hourly
     02 4 * * * root run-parts /etc/cron.daily
     22 4 * * 0 root run-parts /etc/cron.weekly
     42 4 1 * * root run-parts /etc/cron.monthly 
     
     前四行是用来配置 cron 任务运行环境的变量。SHELL 变量的值告诉系统要使用哪个 shell 环境（在这个例子里是 bash shell）；PATH 变量定义用来执行命令的路径。cron 任务的输出被邮寄给 MAILTO 变量定义的用户名。如果 MAILTO 变量被定义为空白字符串（MAILTO=""），电子邮件就不会被寄出。HOME 变量可以用来设置在执行命令或脚本时使用的主目录。
*** cron格式
     /etc/crontab 文件中的每一行都代表一项任务，它的格式是： 
     minute   hour   day   month   dayofweek   command
     
     minute — 分钟，从 0 到 59 之间的任何整数
     hour — 小时，从 0 到 23 之间的任何整数
     day — 日期，从 1 到 31 之间的任何整数（如果指定了月份，必须是该月份的有效日期）
     month — 月份，从 1 到 12 之间的任何整数（或使用月份的英文简写如 jan、feb 等等）
     dayofweek — 星期，从 0 到 7 之间的任何整数，这里的 0 或 7 代表星期日（或使用星期的英文简写如 sun、mon 等等）
     command — 要执行的命令（命令可以是 ls /proc >> /tmp/proc 之类的命令，也可以是执行你自行编写的脚本的命令。）
     
     在以上任何值中，星号（*）可以用来代表所有有效的值。譬如，月份值中的星号意味着在满足其它制约条件后每月都执行该命令。 
     整数间的短线（-）指定一个整数范围。譬如，1-4 意味着整数 1、2、3、4。 
     用逗号（,）隔开的一系列值指定一个列表。譬如，3, 4, 6, 8 标明这四个指定的整数。 
     正斜线（/）可以用来指定间隔频率。在范围后加上 /<integer> 意味着在范围内可以跳过 integer。譬如，0-59/2 可以用来在分钟字段定义每两分钟。间隔频率值还可以和星号一起使用。例如，*/3 的值可以用在月份字段中表示每三个月运行一次任务。 
     开头为井号（#）的行是注释，不会被处理。
     
     如你在 /etc/crontab 文件中所见，它使用 run-parts 脚本来执行 /etc/cron.hourly、/etc/cron.daily、/etc/cron.weekly 和 /etc/cron.monthly 目录中的脚本，这些脚本被相应地每小时、每日、每周、或每月执行。
     这些目录中的文件应该是 shell 脚本。
     
     如果某 cron 任务需要根据调度来执行，而不是每小时、每日、每周、或每月地执行，它可以被添加到 /etc/cron.d 目录中。该目录中的所有文件使用和 /etc/crontab 中一样的语法。范例请参见下例。
     
     # record the memory usage of the system every monday 
     # at 3:30AM in the file /tmp/meminfo
     30 3 * * mon cat /proc/meminfo >> /tmp/meminfo
     # run custom script thee first day of every month at 4:10AM
     10 4 1 * * /root/scripts/backup.sh 
     
     根用户以外的用户可以使用 crontab 工具来配置 cron 任务。所有用户定义的 crontab 都被保存在 /var/spool/cron 目录中，并使用创建它们的用户身份来执行。
     要以某用户身份创建一个 crontab 项目，登录为该用户，然后键入 crontab -e 命令，使用由 VISUAL 或 EDITOR 环境变量指定的编辑器来编辑该用户的 crontab。该文件使用的格式和 /etc/crontab 相同。
     当对 crontab 所做的改变被保存后，该 crontab 文件就会根据该用户名被保存，并写入文件 /var/spool/cron/username 中。
     
     cron 守护进程每分钟都检查 /etc/crontab 文件、etc/cron.d/ 目录、以及 /var/spool/cron 目录中的改变。如果发现了改变，它们就会被载入内存。这样，当某个 crontab 文件改变后就不必重新启动守护进程了。
** sed 按行检索文本文件并且进行文本修改
*** 命令格式：sed [OPTION] '[COMMAND]' [FILE]
   OPTION:
   -n 使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN的资料一般都会被列出到萤幕上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。
   -e 直接在指令列模式上进行 sed 的动作编辑；
      echo -e ${a}adbc\\n[adbc] | sed "/^\[adbc\]$/i\\$a" 输出
   -f 直接将 sed 的动作写在一个档案内， -f filename 则可以执行 filename 内的sed 动作；
   -r sed 的动作支援的是延伸型正规表示法的语法。(预设是基础正规表示法语法)
   -i 直接修改读取的档案内容，而不是由萤幕输出。

   COMMAND:
   常用命令：
   a\ 新增，在当前行后添加一行或多行。多行时除最后一行外，每行末尾需用“\”续行
   c\ 取代，用此符号后的新文本替换当前行中的文本。多行时除最后一行外，每行末尾需用"\"续行
      sed -i "/^export JAVA_HOME=/c\export JAVA_HOME=$java_home" /etc/profile
      将/etc/profile文件中以"export JAVA_HOME="开头的行替换为"export JAVA_HOME=$java_home"
   i\ 插入，在当前行之前插入文本。多行时除最后一行外，每行末尾需用"\"续行
      sed -i '/dfdf/i\add' test.cnf 修改test.cnf文件，搜索所有包含'dfdf'的行，在其上面一行插入'add'这一行
   p  打印，通常会与参数 sed -n 一起使用
   d  删除，因为是删除啊，所以 d 后面通常不接任何咚咚；
      sed -i '1d' test.cnf 修改test.cnf文件，删除第一行
      sed -i '/^dfdf$d' test.cnf   修改test.cnf文件，删除所有严格匹配'dfdf'的行
   s  取代，搭配正则表达式使用，
      sed -i 's:dfdf:#dfdf:g' test.cnf   修改test.cnf文件，将所有为'dfdf'的文本替换为'#dfdf'
      sed -i 1,20s/old/new/g 修改t.conf文件,在1到20行范围内替换所有old字符为new

** logrotate 日志分割工具
   对于Linux 的系统安全来说，日志文件是极其重要的工具。系统管理员可以使用logrotate 程序用来管理系统中的最新的事件，对于Linux 的系统安全来说，日志文件是极其重要的工具。系统管理员可以使用logrotate 程序用来管理系统中的最新的事件。logrotate 还可以用来备份日志文件，本篇将通过以下几部分来介绍
<<<<<<< HEAD
   
   1、logrotate 配置
   2、缺省配置 logrotate
   3、使用include 选项读取其他配置文件
   4、使用include 选项覆盖缺省配置
   5、为指定的文件配置转储参数
   一、logrotate 配置
   
   logrotate 程序是一个日志文件管理工具。用来把旧的日志文件删除，并创建新的日志文件，我们把它叫做“转储”。我们可以根据日志文件的大小，也可以根据其天数来转储，这个过程一般通过 cron 程序来执行。
   logrotate 程序还可以用于压缩日志文件，以及发送日志到指定的E-mail 。
   
   logrotate 的配置文件是 /etc/logrotate.conf。主要参数如下表：
   
   参数 功能
   compress 通过gzip 压缩转储以后的日志
   nocompress 不需要压缩时，用这个参数
   copytruncate 用于还在打开中的日志文件，把当前日志备份并截断
   nocopytruncate 备份日志文件但是不截断
   create mode owner group 转储文件，使用指定的文件模式创建新的日志文件
   nocreate 不建立新的日志文件
   delaycompress 和 compress 一起使用时，转储的日志文件到下一次转储时才压缩
   nodelaycompress 覆盖 delaycompress 选项，转储同时压缩。
   errors address 专储时的错误信息发送到指定的Email 地址
   ifempty 即使是空文件也转储，这个是 logrotate 的缺省选项。
   notifempty 如果是空文件的话，不转储
   mail address 把转储的日志文件发送到指定的E-mail 地址
   nomail 转储时不发送日志文件
   olddir directory 转储后的日志文件放入指定的目录，必须和当前日志文件在同一个文件系统
   noolddir 转储后的日志文件和当前日志文件放在同一个目录下
   prerotate/endscript 在转储以前需要执行的命令可以放入这个对，这两个关键字必须单独成行
   postrotate/endscript 在转储以后需要执行的命令可以放入这个对，这两个关键字必须单独成行
   daily 指定转储周期为每天
   weekly 指定转储周期为每周
   monthly 指定转储周期为每月
   rotate count 指定日志文件删除之前转储的次数，0 指没有备份，5 指保留5 个备份
   tabootext [+] list 让logrotate 不转储指定扩展名的文件，缺省的扩展名是：.rpm-orig, .rpmsave, v, 和 ~ 
   size size 当日志文件到达指定的大小时才转储，Size 可以指定 bytes (缺省)以及KB (sizek)或者MB (sizem).
   二、缺省配置 logrotate
   
   logrotate 缺省的配置:/etc/logrotate.conf。
   Red Hat Linux 缺省安装的文件内容是：
   
   # see "man logrotate" for details
   # rotate log files weekly
   weekly
   
   # keep 4 weeks worth of backlogs
   rotate 4
   
   # send errors to root
   errors root
   # create new (empty) log files after rotating old ones
   create
   
   # uncomment this if you want your log files compressed
   #compress
   1
   # RPM packages drop log rotation information into this directory
   include /etc/logrotate.d
   
   # no packages own lastlog or wtmp --we'll rotate them here
   /var/log/wtmp {
   monthly
   create 0664 root utmp
   rotate 1
   }
   
   /var/log/lastlog {
   monthly
   rotate 1
   }
   
   # system-specific logs may be configured here
   
   
   缺省的配置一般放在logrotate.conf 文件的最开始处，影响整个系统。在本例中就是前面12行。
   
   第三行weekly 指定所有的日志文件每周转储一次。
   第五行 rotate 4 指定转储文件的保留 4份。
   第七行 errors root 指定错误信息发送给root。
   第九行create 指定 logrotate 自动建立新的日志文件，新的日志文件具有和
   原来的文件一样的权限。
   第11行 #compress 指定不压缩转储文件，如果需要压缩，去掉注释就可以了。
   
   三、使用include 选项读取其他配置文件
   include 选项允许系统管理员把分散到几个文件的转储信息，集中到一个
   主要的配置文件。当 logrotate 从logrotate.conf 读到include 选项时，会从指定文件读入配置信息，就好像他们已经在/etc/logrotate.conf 中一样。
   
   第13行 include /etc/logrotate.d 告诉 logrotate 读入存放在/etc/logrotate.d 目录中的日志转储参数，当系统中安装了RPM 软件包时，使用include 选项十分有用。RPM 软件包的日志转储参数一般存放在/etc/logrotate.d 目录。
   
   include 选项十分重要，一些应用把日志转储参数存放在 /etc/logrotate.d 。
   
   典型的应用有：apache, linuxconf, samba, cron 以及syslog。
   
   这样，系统管理员只要管理一个 /etc/logrotate.conf 文件就可以了。
   
   
   
   
   
   四、使用include 选项覆盖缺省配置
   
   当 /etc/logrotate.conf 读入文件时，include 指定的文件中的转储参数将覆盖缺省的参数，如下例：
   
   # linuxconf 的参数
   /var/log/htmlaccess.log
   { errors jim
   notifempty
   nocompress
   weekly
   prerotate
   /usr/bin/chattr -a /var/log/htmlaccess.log
   endscript
   postrotate
   /usr/bin/chattr +a /var/log/htmlaccess.log
   endscript
   }
   /var/log/netconf.log
   { nocompress
   monthly
   }
   
   在这个例子中，当 /etc/logrotate.d/linuxconf 文件被读入时，下面的参数将覆盖/etc/logrotate.conf中缺省的参数。
   
   Notifempty
   errors jim
   
   五、为指定的文件配置转储参数
   经常需要为指定文件配置参数，一个常见的例子就是每月转储/var/log/wtmp。为特定文件而使用的参数格式是：
   
   # 注释
   /full/path/to/file
   {
   option(s)
   }
   
   下面的例子就是每月转储 /var/log/wtmp 一次：
   #Use logrotate to rotate wtmp
   /var/log/wtmp
   {
   monthly
   rotate 1
   }
   
   
   
   六、其他需要注意的问题
   
   1、尽管花括号的开头可以和其他文本放在同一行上，但是结尾的花括号必须单独成行。
   
   2、使用 prerotate 和 postrotate 选项
   下面的例子是典型的脚本 /etc/logrotate.d/syslog，这个脚本只是对
   /var/log/messages 有效。
   
   /var/log/messages
   { 
   prerotate
   /usr/bin/chattr -a /var/log/messages
   endscript
   postrotate
   /usr/bin/kill -HUP syslogd
   /usr/bin/chattr +a /var/log/messages
   endscript
   }
   
   第一行指定脚本对 /var/log messages 有效
   花括号外的/var/log messages
=======

1、logrotate 配置
2、缺省配置 logrotate
3、使用include 选项读取其他配置文件
4、使用include 选项覆盖缺省配置
5、为指定的文件配置转储参数
一、logrotate 配置

logrotate 程序是一个日志文件管理工具。用来把旧的日志文件删除，并创建新的日志文件，我们把它叫做“转储”。我们可以根据日志文件的大小，也可以根据其天数来转储，这个过程一般通过 cron 程序来执行。
logrotate 程序还可以用于压缩日志文件，以及发送日志到指定的E-mail 。

logrotate 的配置文件是 /etc/logrotate.conf。主要参数如下表：

参数 功能
compress 通过gzip 压缩转储以后的日志
nocompress 不需要压缩时，用这个参数
copytruncate 用于还在打开中的日志文件，把当前日志备份并截断
nocopytruncate 备份日志文件但是不截断
create mode owner group 转储文件，使用指定的文件模式创建新的日志文件
nocreate 不建立新的日志文件
delaycompress 和 compress 一起使用时，转储的日志文件到下一次转储时才压缩
nodelaycompress 覆盖 delaycompress 选项，转储同时压缩。
errors address 专储时的错误信息发送到指定的Email 地址
ifempty 即使是空文件也转储，这个是 logrotate 的缺省选项。
notifempty 如果是空文件的话，不转储
mail address 把转储的日志文件发送到指定的E-mail 地址
nomail 转储时不发送日志文件
olddir directory 转储后的日志文件放入指定的目录，必须和当前日志文件在同一个文件系统
noolddir 转储后的日志文件和当前日志文件放在同一个目录下
prerotate/endscript 在转储以前需要执行的命令可以放入这个对，这两个关键字必须单独成行
postrotate/endscript 在转储以后需要执行的命令可以放入这个对，这两个关键字必须单独成行
daily 指定转储周期为每天
weekly 指定转储周期为每周
monthly 指定转储周期为每月
rotate count 指定日志文件删除之前转储的次数，0 指没有备份，5 指保留5 个备份
tabootext [+] list 让logrotate 不转储指定扩展名的文件，缺省的扩展名是：.rpm-orig, .rpmsave, v, 和 ~ 
size size 当日志文件到达指定的大小时才转储，Size 可以指定 bytes (缺省)以及KB (sizek)或者MB (sizem).
二、缺省配置 logrotate

logrotate 缺省的配置:/etc/logrotate.conf。
Red Hat Linux 缺省安装的文件内容是：

# see "man logrotate" for details
# rotate log files weekly
weekly

# keep 4 weeks worth of backlogs
rotate 4

# send errors to root
errors root
# create new (empty) log files after rotating old ones
create

# uncomment this if you want your log files compressed
#compress
1
# RPM packages drop log rotation information into this directory
include /etc/logrotate.d

# no packages own lastlog or wtmp --we'll rotate them here
/var/log/wtmp {
monthly
create 0664 root utmp
rotate 1
}

/var/log/lastlog {
monthly
rotate 1
}

# system-specific logs may be configured here


缺省的配置一般放在logrotate.conf 文件的最开始处，影响整个系统。在本例中就是前面12行。

第三行weekly 指定所有的日志文件每周转储一次。
第五行 rotate 4 指定转储文件的保留 4份。
第七行 errors root 指定错误信息发送给root。
第九行create 指定 logrotate 自动建立新的日志文件，新的日志文件具有和
原来的文件一样的权限。
第11行 #compress 指定不压缩转储文件，如果需要压缩，去掉注释就可以了。

三、使用include 选项读取其他配置文件
include 选项允许系统管理员把分散到几个文件的转储信息，集中到一个
主要的配置文件。当 logrotate 从logrotate.conf 读到include 选项时，会从指定文件读入配置信息，就好像他们已经在/etc/logrotate.conf 中一样。

第13行 include /etc/logrotate.d 告诉 logrotate 读入存放在/etc/logrotate.d 目录中的日志转储参数，当系统中安装了RPM 软件包时，使用include 选项十分有用。RPM 软件包的日志转储参数一般存放在/etc/logrotate.d 目录。

include 选项十分重要，一些应用把日志转储参数存放在 /etc/logrotate.d 。

典型的应用有：apache, linuxconf, samba, cron 以及syslog。

这样，系统管理员只要管理一个 /etc/logrotate.conf 文件就可以了。

 

 

四、使用include 选项覆盖缺省配置

当 /etc/logrotate.conf 读入文件时，include 指定的文件中的转储参数将覆盖缺省的参数，如下例：

# linuxconf 的参数
/var/log/htmlaccess.log
{ errors jim
notifempty
nocompress
weekly
prerotate
/usr/bin/chattr -a /var/log/htmlaccess.log
endscript
postrotate
/usr/bin/chattr +a /var/log/htmlaccess.log
endscript
}
/var/log/netconf.log
{ nocompress
monthly
}

在这个例子中，当 /etc/logrotate.d/linuxconf 文件被读入时，下面的参数将覆盖/etc/logrotate.conf中缺省的参数。

Notifempty
errors jim

五、为指定的文件配置转储参数
经常需要为指定文件配置参数，一个常见的例子就是每月转储/var/log/wtmp。为特定文件而使用的参数格式是：

# 注释
/full/path/to/file
{
option(s)
}

下面的例子就是每月转储 /var/log/wtmp 一次：
#Use logrotate to rotate wtmp
/var/log/wtmp
{
monthly
rotate 1
}

 

六、其他需要注意的问题

1、尽管花括号的开头可以和其他文本放在同一行上，但是结尾的花括号必须单独成行。

2、使用 prerotate 和 postrotate 选项
下面的例子是典型的脚本 /etc/logrotate.d/syslog，这个脚本只是对
/var/log/messages 有效。

/var/log/messages
{ 
prerotate
/usr/bin/chattr -a /var/log/messages
endscript
postrotate
/usr/bin/kill -HUP syslogd
/usr/bin/chattr +a /var/log/messages
endscript
}

第一行指定脚本对 /var/log messages 有效
花括号外的/var/log messages
** ssh 远程
*** Linux下安装启动SSH服务端
    ssh服务端状态：service sshd status
    如果没有此服务，安装：yum install openssh-server
    安装完成后启动：service openssh start
*** Linux下安装使用SSH客户端
    是否安装ssh：ssh -version
    没有的话安装：yum install openssh-clients
    登录远程机器：ssh root@192.168.0.38
*** 使用ssh-agent实现客户端不输入密码直接登录远程服务器
     1. 在客户端的~/.ssh目录下生成rsa私钥和公钥（安全起见要输入密码passphrase，默认私钥id_dsa和公钥id_rsa.pub）：ssh-keygen -t rsa
     2. 服务器端修改/etc/ssh/sshd_config文件,启用public key authorization
     3. chmod go-w $HOME $HOME/.ssh $HOME/.ssh/authorized_keys
     4. 将客户端的公钥复制到服务器的~/.ssh目录下，执行命令：cat id_rsa.pub > authorized_key，
        如果都是linux的话,scp ~/.ssh/id_rsa.pub root@192.168.0.11:.ssh/authorized_keys
        或者ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.0.11
        或者: cat ~/.ssh/id_rsa.pub | ssh user@remote.machine.com 'cat >> .ssh/authorized_keys'
     5. 在客户端执行：ssh-agent sh -c 'ssh-add < /dev/null && bash'
*** 使用keychain
     1. keychain官网下载安装包http://www.funtoo.org/Keychain， 解压到任意目录，执行:install -m0755 keychain /usr/bin
     2. 命令行输入: eval $(keychain --eval --agents ssh -Q --quiet id_rsa)
     3. 在/etc/profile.d下新建keychain.sh，内容:
        #!/bin/bash
        /usr/bin/keychain ~/.ssh/id_rsa ~/.ssh/id_rsa
        source $HOME/.keychain/$HOSTNAME-sh
        更改此脚本权限 chomod +x /etc/profile.d/keychain.sh
** vmstat 监控CPU
   vmstat命令是最常见的Linux/Unix监控工具，可以展现给定时间间隔的服务器的状态值,包括服务器的CPU使用率，内存使用，虚拟内存交换情况,IO读写情况。这个命令是我查看Linux/Unix最喜爱的命令，一个是Linux/Unix都支持，二是相比top，我可以看到整个机器的CPU,内存,IO的使用情况，而不是单单看到各个进程的CPU使用率和内存使用率(使用场景不一样)。
   
   一般vmstat工具的使用是通过两个数字参数来完成的，第一个参数是采样的时间间隔数，单位是秒，第二个参数是采样的次数，如:
   
   root@ubuntu:~# vmstat 2 1
   procs -----------memory---------- ---swap-- -----io---- -system-- ----cpu----
   r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa
   1  0      0 3498472 315836 3819540    0    0     0     1    2    0  0  0 100  0
   2表示每个两秒采集一次服务器状态，1表示只采集一次。
   
   实际上，在应用过程中，我们会在一段时间内一直监控，不想监控直接结束vmstat就行了,例如:
   
   复制代码
   root@ubuntu:~# vmstat 2  
   procs -----------memory---------- ---swap-- -----io---- -system-- ----cpu----
   r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa
   1  0      0 3499840 315836 3819660    0    0     0     1    2    0  0  0 100  0
   0  0      0 3499584 315836 3819660    0    0     0     0   88  158  0  0 100  0
   0  0      0 3499708 315836 3819660    0    0     0     2   86  162  0  0 100  0
   0  0      0 3499708 315836 3819660    0    0     0    10   81  151  0  0 100  0
   1  0      0 3499732 315836 3819660    0    0     0     2   83  154  0  0 100  0
   复制代码
   这表示vmstat每2秒采集数据，一直采集，直到我结束程序，这里采集了5次数据我就结束了程序。
   
   好了，命令介绍完毕，现在开始实战讲解每个参数的意思。
   
   r 表示运行队列(就是说多少个进程真的分配到CPU)，我测试的服务器目前CPU比较空闲，没什么程序在跑，当这个值超过了CPU数目，就会出现CPU瓶颈了。这个也和top的负载有关系，一般负载超过了3就比较高，超过了5就高，超过了10就不正常了，服务器的状态很危险。top的负载类似每秒的运行队列。如果运行队列过大，表示你的CPU很繁忙，一般会造成CPU使用率很高。
   
   b 表示阻塞的进程,这个不多说，进程阻塞，大家懂的。
   
   swpd 虚拟内存已使用的大小，如果大于0，表示你的机器物理内存不足了，如果不是程序内存泄露的原因，那么你该升级内存了或者把耗内存的任务迁移到其他机器。
   
   free   空闲的物理内存的大小，我的机器内存总共8G，剩余3415M。
   
   buff   Linux/Unix系统是用来存储，目录里面有什么内容，权限等的缓存，我本机大概占用300多M
   
   cache cache直接用来记忆我们打开的文件,给文件做缓冲，我本机大概占用300多M(这里是Linux/Unix的聪明之处，把空闲的物理内存的一部分拿来做文件和目录的缓存，是为了提高 程序执行的性能，当程序使用内存时，buffer/cached会很快地被使用。)
   
   si  每秒从磁盘读入虚拟内存的大小，如果这个值大于0，表示物理内存不够用或者内存泄露了，要查找耗内存进程解决掉。我的机器内存充裕，一切正常。
   
   so  每秒虚拟内存写入磁盘的大小，如果这个值大于0，同上。
   
   bi  块设备每秒接收的块数量，这里的块设备是指系统上所有的磁盘和其他块设备，默认块大小是1024byte，我本机上没什么IO操作，所以一直是0，但是我曾在处理拷贝大量数据(2-3T)的机器上看过可以达到140000/s，磁盘写入速度差不多140M每秒
   
   bo 块设备每秒发送的块数量，例如我们读取文件，bo就要大于0。bi和bo一般都要接近0，不然就是IO过于频繁，需要调整。
   
   in 每秒CPU的中断次数，包括时间中断
   
   cs 每秒上下文切换次数，例如我们调用系统函数，就要进行上下文切换，线程的切换，也要进程上下文切换，这个值要越小越好，太大了，要考虑调低线程或者进程的数目,例如在apache和nginx这种web服务器中，我们一般做性能测试时会进行几千并发甚至几万并发的测试，选择web服务器的进程可以由进程或者线程的峰值一直下调，压测，直到cs到一个比较小的值，这个进程和线程数就是比较合适的值了。系统调用也是，每次调用系统函数，我们的代码就会进入内核空间，导致上下文切换，这个是很耗资源，也要尽量避免频繁调用系统函数。上下文切换次数过多表示你的CPU大部分浪费在上下文切换，导致CPU干正经事的时间少了，CPU没有充分利用，是不可取的。
   
   us 用户CPU时间，我曾经在一个做加密解密很频繁的服务器上，可以看到us接近100,r运行队列达到80(机器在做压力测试，性能表现不佳)。
   
   sy 系统CPU时间，如果太高，表示系统调用时间长，例如是IO操作频繁。
   
   id  空闲 CPU时间，一般来说，id + us + sy = 100,一般我认为id是空闲CPU使用率，us是用户CPU使用率，sy是系统CPU使用率。
   
   wt 等待IO CPU时间。
* 网络配置
** ifconfig 查询设定网卡与网络配置
   ifconfig 查看网卡信息
   /etc/sysconfig/network-script/ifcfg-eth0  此文件代表网卡eth0的配置文件
   ifconfig eth0 up 激活eth0网卡
   ifup eth0
   ifconfig eth0 down 禁用eth0网卡
   ifdown eth0
   service network restart 重启网络服务
   ifconfig eth0:1 192.168.0.10 broadcast 192.168.0.255  Mask:255.255.255.0 添加虚拟ip
   route add host 192.168.0.10 dev eth0:1 添加路由
** iptables 防火墙
*** 防火墙配置文件
    /etc/sysconfig/iptables
    默认如下：
    # Generated by iptables-save v1.4.7 on Wed Jan 28 09:33:04 2015
    *filter
    :INPUT ACCEPT [0:0]
    :FORWARD ACCEPT [0:0]
    :OUTPUT ACCEPT [483:59866]
    -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
    -A INPUT -p icmp -j ACCEPT
    -A INPUT -i lo -j ACCEPT
    -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
    -A INPUT -j REJECT --reject-with icmp-host-prohibited
    -A FORWARD -j REJECT --reject-with icmp-host-prohibited
*** 查看本机防火墙设置
    iptables -L -n
*** 清除防火墙规则
    iptables -F
*** 查看防火墙设置
    vi /etc/sysconfig/iptables
*** 开放某个端口
    iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT
    iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT
    service iptables save
*** 关闭防火墙
    暂时:service iptables stop
    永久:chkconfig iptables off
** netstat 显示网络连接状态
   netstate -nao | grep [PORT]  查看端口占用
   netstate -rn     查看路由
** route
   添加默认网关
   route add default gw 192.168.1.1
** ethx 
   配置eth0的IP地址， 同时激活该设备
   eth0 192.168.1.10 netmask 255.255.255.0 up
** DNS配置
   配置DNS vi /etc/resolv.conf
   添加内容:
   　　nameserver 202.96.134.133
   　　nameserver 202.96.128.68
   　　nameserver 202.96.128.166
   查看DNS
   　　less /etc/resolv.conf
** 单网卡单ip
*** RedHat系列
   vi /etc/sysconfig/network-scripts/ifcfg-eth[x]文件([x]为使用的网卡)
   静态配置
   # xxxxxxx(网卡名称，不用改)
   DEVICE=eth0
   BOOTPROTO=static
   TYPE=ether
   HWADDR=xx:xx:xx:xx:xx:xx (网卡mac地址，不用改)
   IPADDR=x.x.x.x(ip地址)
   NETMASK=x.x.x.x(子网掩码)
   BROADCAST=x.x.x.x.(广播地址)
   NETWORK=x.x.x.x(网络地址)
   GATEWAY=x.x.x.x(网关地址)
   ONBOOT=yes(开机自启动)
   DNS1=x.x.x.x(域名服务器地址)
   DNS2=x.x.x.x
   注意：ONBOOT一定要设置为yes，否则可能出现下述症状，eth0未弹出：
   动态配置
   # xxxxxxx(网卡名称，不用改)
   DEVICE=eth0
   BOOTPROTO=dhcp
   TYPE=ether
   HWADDR=xx:xx:xx:xx:xx:xx (网卡mac地址，不用改)
   ONBOOT=yes(开机自启动)
*** Ubuntu系列
   vi /etc/network/interfaces
   # The loopback network interface (配置环回口)
   　　auto lo # 开机自动激lo接口
   　　iface lo inet loopback # 配置lo接口为环回口
   　　# The primary network interface #配置主网络接口
   　　auto eth0 #开机自动激活eth0接口
   　　iface eth0 inet dhcp #配置eth0接口为DHCP自动获取
   #或者配置eth0为静态地址
   　　# The primary network interface (配置主网络接口)
   　　auto eth0 #开机自动激活eth0接口
   　　iface eth0 inet static #配置eth0接口为静态地址
   　　address 192.168.1.10
   　　gateway 192.168.1.254
   　　Netmask 255.255.255.0
   　　network 192.168.1.0
   　　broadcast 192.168.1.255
** 单网卡多ip
   直接用命令行，各系统通用，但是是暂时性的
   ifconfig eth0:0 192.168.0.1 netmask 255.255.255.0 up
*** RadHat系列
   仿照/etc/sysconfig/network-scripts/ifcfg-eth0增加一文件根据网络虚拟接口的名字进行命名
   例如ifcfg-eth0:0或者ifcfg-eth0:1等等
   #下边看下ifcfg-eth0:0文件里面的配置信息
   DEVICE=eth0:0 #网络虚拟接口eth0:0
   ONBOOT=yes #启动的时候激活
   BOOTPROTO=static #使用静态ip地址
   IPADDR=192.168.0.1 #分配ip地址
   NETMASK=255.255.255.0 #子网掩码
   其他配置文件类似。
   重启网络服务
   service network restart
*** Ubuntu系列
   直接在/etc/network/interfaces文件里添加内容
   auto eth0:0
   iface eth0:0 inet static
   name Ethernet Lan card
   address 192.168.0.2
   netmask 255.255.255.0
   network 192.168.0.0
   broadcast 192.168.0.255
   #gateway 192.168.0.254
** 高级
   确定网口位置---工具ethtool
   (1)ethtool DEVNAME   查看相应设备名称对应的设备信息 example：ethtool eth0
   最后一行会显示Link detected: yes/no
   (2)ethtool -p DEVNAME   查看相应设备名称对应的设备位置  example: ethtool –p eth0
   回车后与eth0 相对应的网卡接口旁边的指示灯就会闪烁，这样你就能很快确定eth0 网口的位置啦。（按下Ctrl+C 结束命令，停止闪烁）
   管理网络连接的方案：
   （1）/etc/network/interfaces（/etc/init.d/networking）
   （2）Network-Manager
   两套方案是冲突的，不能同时共存。
   第一个方案适用于没有X的环境，如：服务器；或者那些完全不需要改动连接的场合。
   第二套方案使用于有桌面的环境，特别是笔记本，搬来搬去，网络连接情况随时会变的。
   －－－－－－－－－－－－－
   他们两个为了避免冲突，又能共享配置，就有了下面的解决方案：
   1、当Network-Manager发现/etc/network/interfaces被改动的时候，则关闭自己（显示为未托管），除非managed设置成真。
   2、当managed设置成真时，/etc/network/interfaces，则不生效。
   如果想在命令行下配置网络，可能需要关闭NetworkManager服务，打开network服务，以root权限执行
   chkconfig --level 2345 NetworkManager off
   chkconfig --level 2345 network on
   service NetworkManager stop
   service network start
* 一些杂项
** 命令行显示-bash-3.2#
   cp /etc/skel/.{bash_profile,bashrc} ~
   source ~/.bashrc

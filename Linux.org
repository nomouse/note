* 所有
** 系统管理
*** ps  显示当前正在运行的进程
    -e 显示所有进程
    -f 输出所有信息
    ps -aux 列出详细信息
    
*** netstat 显示网络状态 
    netstat -anp
    
*** top 显示任务管理器，查看各个进程的CPU和内存占用率
    进入top后按shirt+h切换到查看线程占用
    
*** df  显示当前的磁盘空间
    -h 用M或者G为单位来显示
    -l 列出本地磁盘信息
    
*** du  显示文件或者文件夹的磁盘空间
    -h 用M或者G为单位来显示
    --max-depth=1 查看文件夹最大深度
    du -h --max-depth=1 work/testing	
    
*** strace 跟踪进程执行时的系统调用和所接收的信号
    strace -o output.txt -T -tt -e trace=all -p 28979
    
*** gdb 程序调试工
** 文件管理
*** find 全文检索
    find [PATH] -name [NAME]
*** ls 显示当前目录下文件夹
    -h 文件大小可读
    -a 显示所有文件和文件夹
    -n 
    -o 显示文件的除组信息外的详细信息
*** ll 以目录形式显示目录下文件夹啊 
*** cd 进入某个目录
    cd .. 进入上一层目录
    cd /  进入根目录
    
*** rm 删除文件或者文件夹
    -r 递归删除（用于删除文件夹）
    -f 强制删除
    rm -rf tomcat 删除tomcat目录
    
*** cp 复制文件或者文件夹
    -f 强行覆盖已有目录或者文件
    -r 递归复制（用于复制文件夹）
    
*** mv 移动文件或者文件夹
    -f 强行移动
    
*** tar 解压缩工具
    命令：tar [OPTION]... [FILE]
    
    z 代表gzip文件
    v 解压缩过程中显示文件
    x 代表解压缩 c代表压缩 t代表查看内容，三者同时只能存在其一
    f 代表需要操作哪个文件，后面必须立即接文件
    -C [dir] 改变工作目录，例如将一个压缩文件解压为另外一个文件夹，必须放置在末尾
    
    例子：
    tar -zvxf jdk-1.6.tar.gz -C /opt/nomouse
    
*** find 查找文件或者文件夹
    find [PATH] -name [NAME] -type d
    -name [文件名]查找相应文件夹
    
*** cat 文本输出
    命令：cat [OPTION]... [FILE]...
    
    例子：
    cat /etc/profile 输出整个文件，无法翻页
    cat tail catalina.out 查看当前日志输出，会不停的刷新
    
*** head 显示一个文件的前几行
*** tail 显示一个文件的后几行
    命令：tail [OPTION]... [FILE]...
    例子：
    tail 10 /etc/profile 显示最后10行
** 用户管理
*** /etc/group 所有组
*** /etc/shadow 所有用户密码
*** /etc/passwd 所有用户
*** passwd 修改密码

*** chmod 操作文件权限，777是全部权限
    -R 递归执行

** 高级工具
*** crontab 定时任务调度
   cron 是一个可以用来根据时间、日期、月份、星期的组合来调度对重复任务的执行的守护进程。

   cron 假定系统持续运行。如果当某任务被调度时系统不在运行，该任务就不会被执行。 
   要使用 cron 服务，你必须安装了 vixie-cron RPM 软件包，而且必须在运行 crond 服务。要判定该软件包是否已安装，使用 rpm -q vixie-cron 命令。要判定该服务是否在运行，使用 /sbin/service crond status 命令。

   a. 配置 cron 任务
   cron 的主配置文件是 /etc/crontab，它包括下面几行：

 

   SHELL=/bin/bash
   PATH=/sbin:/bin:/usr/sbin:/usr/bin
   MAILTO=root
   HOME=/

   # run-parts
   01 * * * * root run-parts /etc/cron.hourly
   02 4 * * * root run-parts /etc/cron.daily
   22 4 * * 0 root run-parts /etc/cron.weekly
   42 4 1 * * root run-parts /etc/cron.monthly 
 

     前四行是用来配置 cron 任务运行环境的变量。SHELL 变量的值告诉系统要使用哪个 shell 环境（在这个例子里是 bash shell）；PATH 变量定义用来执行命令的路径。cron 任务的输出被邮寄给 MAILTO 变量定义的用户名。如果 MAILTO 变量被定义为空白字符串（MAILTO=""），电子邮件就不会被寄出。HOME 变量可以用来设置在执行命令或脚本时使用的主目录。

   /etc/crontab 文件中的每一行都代表一项任务，它的格式是： 
   minute   hour   day   month   dayofweek   command

   minute — 分钟，从 0 到 59 之间的任何整数
   hour — 小时，从 0 到 23 之间的任何整数
   day — 日期，从 1 到 31 之间的任何整数（如果指定了月份，必须是该月份的有效日期）
   month — 月份，从 1 到 12 之间的任何整数（或使用月份的英文简写如 jan、feb 等等）
   dayofweek — 星期，从 0 到 7 之间的任何整数，这里的 0 或 7 代表星期日（或使用星期的英文简写如 sun、mon 等等）
   command — 要执行的命令（命令可以是 ls /proc >> /tmp/proc 之类的命令，也可以是执行你自行编写的脚本的命令。）

   在以上任何值中，星号（*）可以用来代表所有有效的值。譬如，月份值中的星号意味着在满足其它制约条件后每月都执行该命令。 
   整数间的短线（-）指定一个整数范围。譬如，1-4 意味着整数 1、2、3、4。 
   用逗号（,）隔开的一系列值指定一个列表。譬如，3, 4, 6, 8 标明这四个指定的整数。 
   正斜线（/）可以用来指定间隔频率。在范围后加上 /<integer> 意味着在范围内可以跳过 integer。譬如，0-59/2 可以用来在分钟字段定义每两分钟。间隔频率值还可以和星号一起使用。例如，*/3 的值可以用在月份字段中表示每三个月运行一次任务。 
   开头为井号（#）的行是注释，不会被处理。

   如你在 /etc/crontab 文件中所见，它使用 run-parts 脚本来执行 /etc/cron.hourly、/etc/cron.daily、/etc/cron.weekly 和 /etc/cron.monthly 目录中的脚本，这些脚本被相应地每小时、每日、每周、或每月执行。这些目录中的文件应该是 shell 脚本。

   如果某 cron 任务需要根据调度来执行，而不是每小时、每日、每周、或每月地执行，它可以被添加到 /etc/cron.d 目录中。该目录中的所有文件使用和 /etc/crontab 中一样的语法。范例请参见下例。

 

   # record the memory usage of the system every monday 
   # at 3:30AM in the file /tmp/meminfo
   30 3 * * mon cat /proc/meminfo >> /tmp/meminfo
   # run custom script the first day of every month at 4:10AM
   10 4 1 * * /root/scripts/backup.sh 
 

   根用户以外的用户可以使用 crontab 工具来配置 cron 任务。所有用户定义的 crontab 都被保存在 /var/spool/cron 目录中，并使用创建它们的用户身份来执行。要以某用户身份创建一个 crontab 项目，登录为该用户，然后键入 crontab -e 命令，使用由 VISUAL 或 EDITOR 环境变量指定的编辑器来编辑该用户的 crontab。该文件使用的格式和 /etc/crontab 相同。当对 crontab 所做的改变被保存后，该 crontab 文件就会根据该用户名被保存，并写入文件 /var/spool/cron/username 中。

   cron 守护进程每分钟都检查 /etc/crontab 文件、etc/cron.d/ 目录、以及 /var/spool/cron 目录中的改变。如果发现了改变，它们就会被载入内存。这样，当某个 crontab 文件改变后就不必重新启动守护进程了。

   b. 控制对 cron 的使用
   /etc/cron.allow 和 /etc/cron.deny 文件被用来限制对 cron 的使用。这两个使用控制文件的格式都是每行一个用户。两个文件都不允许空格。如果使用控制文件被修改了，cron 守护进程（crond）不必被重启。使用控制文件在每次用户添加或删除一项 cron 任务时都会被读取。

   无论使用控制文件中的规定如何，根用户都总是可以使用 cron。 
   如果 cron.allow 文件存在，只有其中列出的用户才被允许使用 cron，并且 cron.deny 文件会被忽略。 
   如果 cron.allow 文件不存在，所有在 cron.deny 中列出的用户都被禁止使用 cron。

   c. 启动和停止服务
   要启动 cron 服务，使用 /sbin/service crond start 命令。要停止该服务，使用 /sbin/service crond stop 命令。推荐你在引导时启动该服务。
*** sed 按行检索文本文件并且进行文本修改
命令格式：sed [OPTION] '[COMMAND]' [FILE]
	
	OPTION:
	-n∶使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN的资料一般都会被列出到萤幕上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。
    -e∶直接在指令列模式上进行 sed 的动作编辑；
    -f∶直接将 sed 的动作写在一个档案内， -f filename 则可以执行 filename 内的sed 动作；
    -r∶sed 的动作支援的是延伸型正规表示法的语法。(预设是基础正规表示法语法)
    -i∶直接修改读取的档案内容，而不是由萤幕输出。
	
	COMMAND:
	常用命令：
     a∶新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～
     c∶取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！
     i∶插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；
     p∶列印，亦即将某个选择的资料印出。通常 p 会与参数 sed -n 一起运作～
     d∶删除，因为是删除啊，所以 d 后面通常不接任何咚咚；
     s∶取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！
	 
	 例子：
	 sed -i '1d' test.cnf 修改test.cnf文件，删除第一行
	 sed -i '/dfdf/i\add' test.cnf 修改test.cnf文件，搜索所有包含'dfdf'的行，在其上面一行插入'add'这一行
	 sed -i '/^dfdf$d' test.cnf   修改test.cnf文件，搜索所有为'dfdf'的行
	 sed -i 's:dfdf:#dfdf:g' test.cnf   修改test.cnf文件，将所有为'dfdf'的文本替换为'#dfdf'

	 echo -e ${a}adbc\\n[adbc] | sed "/^\[adbc\]$/i\\$a" 输出
	 sed -i "/^export JAVA_HOME=/c\export JAVA_HOME=$java_home" /etc/profile 将/etc/profile文件中以"export JAVA_HOME="开头的行替换为"export JAVA_HOME=$java_home"

*** logrotate 日志分割工具
对于Linux 的系统安全来说，日志文件是极其重要的工具。系统管理员可以使用logrotate 程序用来管理系统中的最新的事件，对于Linux 的系统安全来说，日志文件是极其重要的工具。系统管理员可以使用logrotate 程序用来管理系统中的最新的事件。logrotate 还可以用来备份日志文件，本篇将通过以下几部分来介绍
 

1、logrotate 配置
2、缺省配置 logrotate
3、使用include 选项读取其他配置文件
4、使用include 选项覆盖缺省配置
5、为指定的文件配置转储参数
一、logrotate 配置

logrotate 程序是一个日志文件管理工具。用来把旧的日志文件删除，并创建新的日志文件，我们把它叫做“转储”。我们可以根据日志文件的大小，也可以根据其天数来转储，这个过程一般通过 cron 程序来执行。
logrotate 程序还可以用于压缩日志文件，以及发送日志到指定的E-mail 。

logrotate 的配置文件是 /etc/logrotate.conf。主要参数如下表：

参数 功能
compress 通过gzip 压缩转储以后的日志
nocompress 不需要压缩时，用这个参数
copytruncate 用于还在打开中的日志文件，把当前日志备份并截断
nocopytruncate 备份日志文件但是不截断
create mode owner group 转储文件，使用指定的文件模式创建新的日志文件
nocreate 不建立新的日志文件
delaycompress 和 compress 一起使用时，转储的日志文件到下一次转储时才压缩
nodelaycompress 覆盖 delaycompress 选项，转储同时压缩。
errors address 专储时的错误信息发送到指定的Email 地址
ifempty 即使是空文件也转储，这个是 logrotate 的缺省选项。
notifempty 如果是空文件的话，不转储
mail address 把转储的日志文件发送到指定的E-mail 地址
nomail 转储时不发送日志文件
olddir directory 转储后的日志文件放入指定的目录，必须和当前日志文件在同一个文件系统
noolddir 转储后的日志文件和当前日志文件放在同一个目录下
prerotate/endscript 在转储以前需要执行的命令可以放入这个对，这两个关键字必须单独成行
postrotate/endscript 在转储以后需要执行的命令可以放入这个对，这两个关键字必须单独成行
daily 指定转储周期为每天
weekly 指定转储周期为每周
monthly 指定转储周期为每月
rotate count 指定日志文件删除之前转储的次数，0 指没有备份，5 指保留5 个备份
tabootext [+] list 让logrotate 不转储指定扩展名的文件，缺省的扩展名是：.rpm-orig, .rpmsave, v, 和 ~ 
size size 当日志文件到达指定的大小时才转储，Size 可以指定 bytes (缺省)以及KB (sizek)或者MB (sizem).
二、缺省配置 logrotate

logrotate 缺省的配置募?/etc/logrotate.conf。
Red Hat Linux 缺省安装的文件内容是：

# see "man logrotate" for details
# rotate log files weekly
weekly

# keep 4 weeks worth of backlogs
rotate 4

# send errors to root
errors root
# create new (empty) log files after rotating old ones
create

# uncomment this if you want your log files compressed
#compress
1
# RPM packages drop log rotation information into this directory
include /etc/logrotate.d

# no packages own lastlog or wtmp --we'll rotate them here
/var/log/wtmp {
monthly
create 0664 root utmp
rotate 1
}

/var/log/lastlog {
monthly
rotate 1
}

# system-specific logs may be configured here


缺省的配置一般放在logrotate.conf 文件的最开始处，影响整个系统。在本例中就是前面12行。

第三行weekly 指定所有的日志文件每周转储一次。
第五行 rotate 4 指定转储文件的保留 4份。
第七行 errors root 指定错误信息发送给root。
第九行create 指定 logrotate 自动建立新的日志文件，新的日志文件具有和
原来的文件一样的权限。
第11行 #compress 指定不压缩转储文件，如果需要压缩，去掉注释就可以了。

三、使用include 选项读取其他配置文件
include 选项允许系统管理员把分散到几个文件的转储信息，集中到一个
主要的配置文件。当 logrotate 从logrotate.conf 读到include 选项时，会从指定文件读入配置信息，就好像他们已经在/etc/logrotate.conf 中一样。

第13行 include /etc/logrotate.d 告诉 logrotate 读入存放在/etc/logrotate.d 目录中的日志转储参数，当系统中安装了RPM 软件包时，使用include 选项十分有用。RPM 软件包的日志转储参数一般存放在/etc/logrotate.d 目录。

include 选项十分重要，一些应用把日志转储参数存放在 /etc/logrotate.d 。

典型的应用有：apache, linuxconf, samba, cron 以及syslog。

这样，系统管理员只要管理一个 /etc/logrotate.conf 文件就可以了。

 

 

四、使用include 选项覆盖缺省配置

当 /etc/logrotate.conf 读入文件时，include 指定的文件中的转储参数将覆盖缺省的参数，如下例：

# linuxconf 的参数
/var/log/htmlaccess.log
{ errors jim
notifempty
nocompress
weekly
prerotate
/usr/bin/chattr -a /var/log/htmlaccess.log
endscript
postrotate
/usr/bin/chattr +a /var/log/htmlaccess.log
endscript
}
/var/log/netconf.log
{ nocompress
monthly
}

在这个例子中，当 /etc/logrotate.d/linuxconf 文件被读入时，下面的参数将覆盖/etc/logrotate.conf中缺省的参数。

Notifempty
errors jim

五、为指定的文件配置转储参数
经常需要为指定文件配置参数，一个常见的例子就是每月转储/var/log/wtmp。为特定文件而使用的参数格式是：

# 注释
/full/path/to/file
{
option(s)
}

下面的例子就是每月转储 /var/log/wtmp 一次：
#Use logrotate to rotate wtmp
/var/log/wtmp
{
monthly
rotate 1
}

 

六、其他需要注意的问题

1、尽管花括号的开头可以和其他文本放在同一行上，但是结尾的花括号必须单独成行。

2、使用 prerotate 和 postrotate 选项
下面的例子是典型的脚本 /etc/logrotate.d/syslog，这个脚本只是对
/var/log/messages 有效。

/var/log/messages
{ 
prerotate
/usr/bin/chattr -a /var/log/messages
endscript
postrotate
/usr/bin/kill -HUP syslogd
/usr/bin/chattr +a /var/log/messages
endscript
}

第一行指定脚本对 /var/log messages 有效
花括号外的/var/log messages
*** ssh 远程
一、Linux下安装启动SSH服务端
ssh服务端状态：service sshd status
如果没有此服务，安装：yum install openssh-server
安装完成后启动：service openssh start

二、Linux下安装使用SSH客户端
是否安装ssh：ssh -version
没有的话安装：yum install openssh-clients
登录远程机器：ssh root@192.168.0.38

三、使用dsa实现客户端不输入密码直接登录远程服务器
1、在客户端的~/.ssh目录下生成dsa私钥和公钥（安全起见要输入密码passphrase，默认公钥私钥文件名为id_dsa和id_dsa.pub）：ssh-keygen -t dsa
2、将客户端的公钥复制到服务器的~/.ssh目录下，执行命令：cat id_dsa.pub > authorized_key2
3、在客户端执行：ssh-agent sh -c 'ssh-add < /dev/null && bash'
4、
** 网络配置
*** ifconfig 显示网卡信息
    激活设备
    ifconfig eth0 up
    禁用设备
    ifconfig eth0 down
*** iptables
    查看防火墙设置
    vi /etc/sysconfig/iptables
*** netstat 显示网络连接状态
    netstate -nao | grep [PORT]  查看端口占用
    netstate -rn     查看路由
*** route
    添加默认网关
    route add default gw 192.168.1.1
*** ethx 
    配置eth0的IP地址， 同时激活该设备
    eth0 192.168.1.10 netmask 255.255.255.0 up
*** DNS 配置DNS服务器
    配置DNS vi /etc/resolv.conf
    添加内容:
    　　nameserver 202.96.134.133
    　　nameserver 202.96.128.68
    　　nameserver 202.96.128.166
    查看DNS
    　　less /etc/resolv.conf
    
    (二)配置网络，单网卡单ip
    
    （1）RedHat系列
    
    vi /etc/sysconfig/network-scripts/ifcfg-eth[x]文件([x]为使用的网卡)
    
    静态配置
    # xxxxxxx(网卡名称，不用改)
    DEVICE=eth0
    BOOTPROTO=static
    TYPE=ether
    HWADDR=xx:xx:xx:xx:xx:xx (网卡mac地址，不用改)
    IPADDR=x.x.x.x(ip地址)
    NETMASK=x.x.x.x(子网掩码)
    BROADCAST=x.x.x.x.(广播地址)
    NETWORK=x.x.x.x(网络地址)
    GATEWAY=x.x.x.x(网关地址)
    ONBOOT=yes(开机自启动)
    DNS1=x.x.x.x(域名服务器地址)
    DNS2=x.x.x.x
    注意：ONBOOT一定要设置为yes，否则可能出现下述症状，eth0未弹出：
    
    动态配置
    # xxxxxxx(网卡名称，不用改)
    DEVICE=eth0
    BOOTPROTO=dhcp
    TYPE=ether
    HWADDR=xx:xx:xx:xx:xx:xx (网卡mac地址，不用改)
    ONBOOT=yes(开机自启动)
    
    
    （2）Ubuntu系列
    
    vi /etc/network/interfaces
    
    # The loopback network interface (配置环回口)
    　　auto lo # 开机自动激lo接口
    　　iface lo inet loopback # 配置lo接口为环回口
    　　# The primary network interface #配置主网络接口
    
    　　auto eth0 #开机自动激活eth0接口
    　　iface eth0 inet dhcp #配置eth0接口为DHCP自动获取
    
    #或者配置eth0为静态地址
    　　# The primary network interface (配置主网络接口)
    　　auto eth0 #开机自动激活eth0接口
    　　iface eth0 inet static #配置eth0接口为静态地址
    　　address 192.168.1.10
    　　gateway 192.168.1.254
    　　Netmask 255.255.255.0
    　　network 192.168.1.0
    　　broadcast 192.168.1.255
    
    
    
    5、配置网络，单网卡多ip
    
    直接用命令行，各系统通用，但是是暂时性的
    ifconfig eth0:0 192.168.0.1 netmask 255.255.255.0 up
    
    
    
    （1）RadHat系列
    
    
    仿照/etc/sysconfig/network-scripts/ifcfg-eth0增加一文件根据网络虚拟接口的名字进行命名
    例如ifcfg-eth0:0或者ifcfg-eth0:1等等
    
    #下边看下ifcfg-eth0:0文件里面的配置信息
    DEVICE=eth0:0 #网络虚拟接口eth0:0
    ONBOOT=yes #启动的时候激活
    BOOTPROTO=static #使用静态ip地址
    IPADDR=192.168.0.1 #分配ip地址
    NETMASK=255.255.255.0 #子网掩码
    其他配置文件类似。
    重启网络服务
    
    service network restart
    
    （2）Ubuntu系列
    
    直接在/etc/network/interfaces文件里添加内容
    
    auto eth0:0
    iface eth0:0 inet static
    name Ethernet Lan card
    address 192.168.0.2
    netmask 255.255.255.0
    network 192.168.0.0
    broadcast 192.168.0.255
    #gateway 192.168.0.254
    
    
    
    (三)高级
    确定网口位置---工具ethtool
    
    (1)ethtool DEVNAME   查看相应设备名称对应的设备信息 example：ethtool eth0
    
    最后一行会显示Link detected: yes/no
    
    (2)ethtool -p DEVNAME   查看相应设备名称对应的设备位置  example: ethtool –p eth0
    
    回车后与eth0 相对应的网卡接口旁边的指示灯就会闪烁，这样你就能很快确定eth0 网口的位置啦。（按下Ctrl+C 结束命令，停止闪烁）
    
    管理网络连接的方案：
    
    （1）/etc/network/interfaces（/etc/init.d/networking）
    （2）Network-Manager
    两套方案是冲突的，不能同时共存。
    第一个方案适用于没有X的环境，如：服务器；或者那些完全不需要改动连接的场合。
    第二套方案使用于有桌面的环境，特别是笔记本，搬来搬去，网络连接情况随时会变的。
    －－－－－－－－－－－－－
    他们两个为了避免冲突，又能共享配置，就有了下面的解决方案：
    1、当Network-Manager发现/etc/network/interfaces被改动的时候，则关闭自己（显示为未托管），除非managed设置成真。
    2、当managed设置成真时，/etc/network/interfaces，则不生效。
    
    
    
    如果想在命令行下配置网络，可能需要关闭NetworkManager服务，打开network服务，以root权限执行
    chkconfig --level 2345 NetworkManager off
    chkconfig --level 2345 network on
    service NetworkManager stop
service network start

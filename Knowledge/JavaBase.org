** Java基本类型和包装类型
*** Integer
*** Long
    基本类型使用==比较时，会使用缓存来对比，因此会出现超过范围不相等的情况，一般要使用equals

** String
*** 原理
    String不属于基础类型，属于对象，但是String的内存分配不在堆中，而是在方法区的常量池中，要避免new String
*** intern方法
    String的intern方法是去检查常量池中是否有相同的String对象，如果有就直接指向此引用
*** StringBuilder
*** 字符串拼接
    常见有＋，String.concat()和StringBuilder（StringBuffer）.append()等方法
    推荐使用append，但要注意StringBuilder的扩容问题
    StringBuilder扩容问题，StringBuilder底层是一个char数组，每次appand或者insert的时候，
    先检测char数组能不能承受下整个StringBuilder的字符串长度，如果不行则扩容
*** 字符串拆分
    常见有split,StringTokenizer,indexOf+substring等方法
    其中StringTokenizer的性能最快,split最慢,因为split底层是用正则表达式来实现
*** 字符串查找
    常见有indexOf/startWith/endsWith/matches等方法,
    其中indexOf性能最高，matches最差,因为用正则表达式
*** 字符串格式化
    String.format性能很差，因为每次都会new一个Formatter类，StringBuilder类和String类,推荐使用拼接，或者实在不行用Formater类复用
** Object
*** hashCode
   一般是通过将该对象的内部地址转换成一个整数来实现的
   String类的hashCode算法
   比如String str="abcd"
   算法为:
   (('a'*31+'b')*31+'c')*31+'d' = 2987074
   这个算法的优点在于越早的字符权重越高,而且临近的字母的hash值也临近,可以加快索引的速度
*** equarls
   默认2个对象是否指向同一个引用，用hashCode方法实现
*** toString
   默认该字符串由类名（对象是该类的一个实例）、at 标记符“@”和此对象哈希码的无符号十六进制表示组成。
*** wait notify notifyAll
    wait指在其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者超过指定的时间量前，导致当前线程等待。
    notify 唤醒在此对象监视器上等待的单个线程。如果所有线程都在此对象上等待，则会选择唤醒其中一个线程。选择是任意性的，并在对实现做出决定时发生。线程通过调用其中一个wait方法，在对象的监视器上等待。
    wait notify与sleep的区别,见Java同步
** Java范型
*** 范型的优点
    编译时检查类型,避免强制类型传换带来的运行时错误
*** 范型的应用
    JDK集合包
*** 伪范型
    Java范型的实现是伪范型，即在编译阶段检查，在生成字节码时不会包含范型的信息，这一点区分于c++的范型。
    因此，Java范型做不到在运行时动态指定范型，只能通过类文件传递
** Java枚举
** Java注解
** Java RMI
*** 对象序列化
    Serialization(序列化)是将一个Java对象转化为字节流的过程，通常通过实现Serializable接口来实现序列化
    序列化对象需要设置serialVersionUID，用于标识序列化对象版本，反序列化时会参照相应类中的这个值，如果不相等则抛出InvalidClassException
** Java反射
** JavaIO


** Java集合
*** 数据结构
    1.红黑树和二叉树对比，为什么使用红黑树
       AVL平衡二叉树：所有节点的左右子树高度差不超过1。
       红黑树：通过对任何一条从根到叶子的路径上各个节点着色的方式的限制，红黑树确保没有一条路径会比其它路径长出两倍。
       AVL对于平衡的要求更严格，高度上一般低于红黑树
       AVL树适合用于插入与删除次数比较少，但查找多的情况；
       相对于要求严格的AVL树来说，红黑树的旋转次数少，所以对于搜索、插入、删除操作较多的情况下，我们就用红黑树。
*** List
    1. ArrayList原理
      ArrayList的数据存放在一个Object数组中(transient Object[] elementData)。
      ArrayList的size等于initialCapacity -1 时，会生成一个更大的数组来放置当前数据
    2. LinkedList原理
       底层采用双向队列实现

*** Map
    1. HashMap原理
      HashMap的所有数据存放在一个Entry数组中(transient Entry<K,V>[] table)，其中Entry代表一个键值对，并存放指向另外一个Entry的引用，
      这样就构成一个链表，因此HashMap的数据结构是数组+链表，JDK1.8后变成数组+红黑树。
      调用put方法时，先计算key的hash值，然后以此为下标将Entry放入table中，如果hash值相等，则放入对应的链表中。
      调用get方法时，先计算key的hash值，然后通过table下标取得Entry，并遍历链表返回value
    2. HashMap的性能问题
       HashMap有两个可选参数，即initialCapacity(初始数组大小)和loaderFactor(负载因子)
       当HashMap的size大于initialCapacity * loaderFactor时，HashMap会进行rehash，即生成一个更大的table来存放当前Entry。
    3. TreeMap原理
       TreeMap是一个有序的key-value集合，是非线程安全的，基于红黑树(Red-Black tree)实现。
       其映射根据键的自然顺序进行排序，或者根据创建映射时提供的Comparator进行排序，具体取决于使用的构造方法。

*** Set
    1. HashSet哈希集合
       HashSet内部通过一个HashMap的key来放置数据
    2. LinkedHashSet顺序哈希集合
       LinkedHashSet是一个哈希表和链表的结合，且是一个双向链表
       利用这个特性可以用来实现LRU缓存
    3. TreeSet排序哈希集合
        原理见TreeMap
*** Queue
    1. Deque双端队列
    2. PriorityQueue优先级队列
        底层采用二叉堆实现，在初始化时可以设定升序和降序以及比较器，

*** Stack
    1. Stack
       java栈，offer,pop,peek



** Java多线程
*** 线程和进程的区别
   1. 在引入线程的操作系统中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位。
   2. 进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率
   3. 进程和线程的主要差别在于它们是不同的操作系统资源管理方式，进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。
    线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。
    但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。
*** 如何实现线程
    1. Thread
    2. Runnable
    3. sleep
       sleep是Thread的静态方法，通常使用Thread.currentThread.sleep()来使用，作用是让线程休眠制定的时间，在时间到达时恢复，也就是说sleep将在接到时间到达事件事恢复线程执行，也可以强行调用具体线程实例的interrupted方法强行中断
*** 线程生命周期
    New->Runnable->Blocked/Waiting/Timed Waiting->Terminal
*** ThreadPoolExecutor构造方法核心参数
    corePoolSize：核心线程数，也就是线程池期望池化的最大线程数
    maximumPoolSize：最大线程数，也就是允许线程池临时超载后达到的最大线程数，虽然期望将并发状态保持在一定范围，但是在任务过多的情况下，增加非核心线程来临时处理任务。非核心线程数 = maximumPoolSize - corePoolSize
    workQueue：阻塞队列，存储实现Runnable接口的线程任务
    keepAliveTime：在没有任务时线程的存活时间
    threadFactory：线程工厂，用来创建新线程
    handler：当任务已满，并且无法再增加线程数时，或拒绝添加任务时，所执行的策略
*** 线程池的核心步骤
    1.提交一个任务，线程池里存活的核心线程数小于线程数corePoolSize时，线程池会创建一个核心线程去处理提交的任务。
    2.如果线程池核心线程数已满，即线程数已经等于corePoolSize，一个新提交的任务，会被放进任务队列workQueue排队等待执行。
    3.当线程池里面存活的线程数已经等于corePoolSize了，并且任务队列workQueue已满，再判断线程数是否达到maximumPoolSize，即最大线程数是否已满，如果没到达，创建一个非核心线程执行提交的任务。
    4.如果当前的线程数达到了maximumPoolSize，还有新的任务过来的话，直接采用拒绝策略处理。
*** ThreadLocal

** Java并发
*** 并发的三个问题
   1. 原子性
      原子性：即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。
   2. 可见性
      可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。
   3. 有序性
      有序性：即程序执行的顺序按照代码的先后顺序执行。
*** 如何实现多线程同步
    1. synchronized
       两种使用方式，同步方法和同步块。
    2. lock
    3. wait nofify
       wait是Object的方法，也就是说可以对任意一个对象调用wait方法，调用wait方法将会将调用者的线程挂起，直到其他线程调用同一个对象的notify方法才会重新激活调用者，需要配合同步块或方法实现
       在使用wait和nofity之前都必须首先获得相关的锁，而wait()被调用后，会释放之前进行同步块所获取到的锁。
*** volitile
    volatile来保证并发对象的有序性和可见性。
    可见性问题的根源是因为CPU高速缓存和主存的数据不一致，通过MESI协议(CPU缓存一致性协议)保证
    volatile变量修饰后，在总线上注册MESI协议，开启CPU总线嗅探机制，一个高速缓存修改后就失效所有其他高速缓存内的值
    有序性是通过内存屏障禁止java编译器和CPU指令重排，Load Barrier，Store Barrier，被volatile修饰的变量在写时前面插入
    StoreStore写后插入StoreLoad，读前插入LoadLoad,读后插入LoadStore。

*** synchronized原理
    synchronized是java关键字，是jvm层面提供的一种锁，
    特性：可重入、非公平
    字节码层面通过monitorentry和monitorexit来完成

*** synchronized锁升级过程
    锁主要存在四种状态，依次是:无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态，他们会随着竞争的激烈而逐渐升级。
    无锁：
        偏向的线程ID是0，偏向一个Anonymous BiasedLock
        如果有线程去抢占锁，那么这个时候线程会先去抢占偏向锁
    偏向锁：
        也就是把markword的线程ID改为当前抢占锁的线程ID的过程
        如果有线程竞争，这个时候会撤销偏向锁，升级到轻量级锁
    轻量级锁：
        线程在自己的线程栈帧中会创建一个 LockRecord，用CAS操作把markword设置为指向自己这个线程的LR的指针，设置成功后表示抢占到锁。
        如果竞争加剧，比如有线程超过10次自旋(-XX:PreBlockSpin参数配置)，在1.6之后，或者自旋线程数超过 CPU核心数的一般，加入了自适应自旋Adapative Self Spinning.JVM会根据上次竞争 的情况来自动控制自旋的时间，
    重量级锁：
        升级到重量级锁，向操作系统申请资源， Linux Mutex，然后线程被挂起进入到等待队列。

*** ReentrantLock原理
    ReentrantLock是java juc包中提供的代码层面的锁
    特性：可重入、支持公平和非公平、支持条件
*** AQS原理
*** synchronized和ReentrantLock区别

** Java并发应用
*** CountDownLatch
    计数器，一个任务等待其他4个任务结束后再执行
    await() countDown()
*** CyclicBarrier
    字面意思回环栅栏，通过它可以实现让一组线程等待至某个状态之后再全部同时执行。
    await()
*** Semaphore
    Semaphore翻译成字面意思为信号量，Semaphore可以控同时访问的线程个数，
    通过 acquire()获取一个许可，如果没有就等待，而release() 释放一个许可。
*** ConcurrentHashMap
    原理，区别于HashTable的Entry数组(Entry<K,V>[] table)，ConcurrentHashMap的数据存放在Segment数组中(Segment<K,V>[] segments)
    其中每个segment包含一个HashEntry数组(HashEntry<K,V>[] table)，也就是说ConcurrentHashMap是由多个小hashmap构成的。
    这样的优点是访问数据时，不需要对整个对象进行加锁，只需要对相应的segament加锁，这样就提高的效率
*** CopyOnWriteArrayList
    原理，更新时先lock一个重入锁ReentrantLock，然后将原有数组复制一份新的数组上进行更新，再将引用指向新的数组,然后unlock
    在更新过程中如果有线程进行读操作，先查看锁状态，如果是lock则是再原有列表上操作的，不会出现数据不一致
    因此，使用时要避免频繁更新
*** ArrayBlockingQueue
    底层采用ReentrantLock+Condition实现，

** JVM
*** JVM简述
    JVM是Java虚拟机的简称，它是Java语言的跨平台特性实现的关键。一般的高级语言如果要在不同的平台上运行，至少需要编译成不同的目标代码。而引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。Java虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。这就是Java的能够“一次编译，到处运行”的原因。
*** JVM生命周期
    JVM的唯一用途就是执行一个Java程序，当一个Java程序启动（main方法），一个JVM实例（在操作系统层面上是一个java进程）就诞生了；当程序关闭退出，这个虚拟机实例也就随之消亡。
*** JVM内存结构
    JVM运行时包含几块区域：方法区(元空间)、堆、Java栈、PC寄存器和本地方法栈，其中方法区和堆是线程共享的，而Java栈和PC寄存器则是每个线程独有的。
*** 堆和栈的区别
    1. 堆储存类的实例，栈储存基本类型、引用类型
    2. 堆是线程共享的，即堆的内容可以被多个线程访问；而栈是独享的，其他线程无法访问。
    3. 栈解决程序的运行问题，即程序如何执行，或者说如何处理数据；堆解决的是数据存储的问题，即数据怎么放、放在哪儿。
*** 为什么要把堆和栈区分出来呢？栈中不是也可以存储数据吗？
    1. 从软件设计的角度看，栈代表了处理逻辑，而堆代表了数据。这样分开，使得处理逻辑更为清晰。分而治之的思想。这种隔离、模块化的思想在软件设计的方方面面都有体现。
    2. 堆与栈的分离，使得堆中的内容可以被多个栈共享（也可以理解为多个线程访问同一个对象）。这种共享的收益是很多的。一方面这种共享提供了一种有效的数据交互方式(如：共享内存)，另一方面，堆中的共享常量和缓存可以被所有栈访问，节省了空间。
    3. 栈因为运行时的需要，比如保存系统运行的上下文，需要进行地址段的划分。由于栈只能向上增长，因此就会限制住栈存储内容的能力。而堆不同，堆中的对象是可以根据需要动态增长的，因此栈和堆的拆分，使得动态增长成为可能，相应栈中只需记录堆中的一个地址即可。
    4. 面向对象就是堆和栈的完美结合。其实，面向对象方式的程序与以前结构化的程序在执行上没有任何区别。但是，面向对象的引入，使得对待问题的思考方式发生了改变，而更接近于自然方式的思考。当我们把对象拆开，你会发现，对象的属性其实就是数据，存放在堆中；而对象的行为（方法），就是运行逻辑，放在栈中。我们在编写对象的时候，其实即编写了数据结构，也编写的处理数据的逻辑。不得不承认，面向对象的设计，确实很美。
*** Java中的参数传递时传值呢？还是传引用？
    1. 不要试图与C进行类比，Java中没有指针的概念。
    2. 程序运行永远都是在栈中进行的，因而参数传递时，只存在传递基本类型和对象引用的问题。不会直接传对象本身。
*** Java对象的大小
    1. 在Java中，一个空Object对象的大小是8byte，这是堆上的大小，加上栈上对象引用的4byte（64位上是8byte），总共是12byte。
    2. 需要注意的是基本类型的包装类，基本类型是不存在于堆上的，但是包装类型需要堆空间，一个int的包装类Integer占用的空间至少为：对象引用（4） + 空Object（8）=12byte，JVM分配内存以8的整数倍来进行，就是16byte，比单纯使用基本类型大了4倍。因此程序中尽量少使用包装类型。
*** Java对象引用类型
    对象引用类型分为强引用、软引用、弱引用和虚引用。
    1. 强引用:就是我们一般声明对象是时虚拟机生成的引用，强引用环境下，垃圾回收时需要严格判断当前对象是否被强引用，如果被强引用，则不会被垃圾回收
    2. 软引用:软引用一般被做为缓存来使用。与强引用的区别是，软引用在垃圾回收时，虚拟机会根据当前系统的剩余内存来决定是否对软引用进行回收。如果剩余内存比较紧张，则虚拟机会回收软引用所引用的空间；如果剩余内存相对富裕，则不会进行回收。换句话说，虚拟机在发生OutOfMemory时，肯定是没有软引用存在的。
    3. 弱引用:弱引用与软引用类似，都是作为缓存来使用。但与软引用不同，弱引用在进行垃圾回收时，是一定会被回收掉的，因此其生命周期只存在于一个垃圾回收周期内。
    弱引用最常见的用处是在集合类中，尤其在哈希表中。哈希表的接口允许使用任何Java对象作为键来使用。当一个键值对被放入到哈希表中之后，哈希表对象本身就有了对这些键和值对象的引用。如果这种引用是强引用的话，那么只要哈希表对象本身还存活，其中所包含的键和值对象是不会被回收的。如果某个存活时间很长的哈希表中包含的键值对很多，最终就有可能消耗掉JVM中全部的内存
    4. 虚引用:虚引用get方法永远返回null，它的唯一作用是追踪对象何时被添加到回收队列中，需要和ReferenceQueue引用队列配合使用，虚引用会可以在其引用对象被回收之后自动添加到引用队列中，我们可以知道那些对象将要被回收。

*** Java类加载器
   1. 类加载器的作用
      ClassLoader用来加载Java字节码文件（.class）到Java虚拟机中运行，它使得Java类可以被动态加载到 Java 虚拟机中并执行。
      java.lang.ClassLoader类的基本职责就是根据一个指定的类的名称，找到或者生成其对应的字节代码，
      然后从这些字节代码中定义出一个 Java 类，即 java.lang.Class类的一个实例。
      除此之外，ClassLoader还负责加载 Java 应用所需的资源，如图像文件和配置文件等。
   2. 系统提供的类加载器
      引导类加载器（bootstrap class loader）：它用来加载 Java 的核心库，是用原生代码来实现的，并不继承自 java.lang.ClassLoader。
      扩展类加载器（extensions class loader）：它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。
      系统类加载器（system class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。
      一般来说，Java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader()来获取它。
   3. 类加载器的代理模式
      类加载器在尝试自己去查找某个类的字节代码并定义它时，会先代理给其父类加载器，由父类加载器先去尝试加载这个类，依次类推。
      在介绍代理模式背后的动机之前，首先需要说明一下 Java 虚拟机是如何判定两个 Java 类是相同的。
      Java 虚拟机不仅要看类的全名是否相同，还要看加载此类的类加载器是否一样。只有两者都相同的情况，才认为两个类是相同的。
      即便是同样的字节代码，被不同的类加载器加载之后所得到的类，也是不同的。
      了解了这一点之后，就可以理解代理模式的设计动机了。代理模式是为了保证 Java 核心库的类型安全。
      所有 Java 应用都至少需要引用 java.lang.Object类，也就是说在运行的时候，
      java.lang.Object这个类需要被加载到 Java 虚拟机中。
      如果这个加载过程由 Java 应用自己的类加载器来完成的话，很可能就存在多个版本的 java.lang.Object类，
      而且这些类之间是不兼容的。
      通过代理模式，对于 Java 核心库的类的加载工作由引导类加载器来统一完成，保证了 Java 应用所使用的都是同一个版本的 Java 核心库的类，是互相兼容的。
   4. 类加载器于Web容器
   5. OSGI
*** JVM垃圾回收算法
    1. 引用计数
    2. 标记-清除
    3. 复制
    4. 标记-整理
    5. 分代收集
*** CMS过程
    基于标记-清除算法，与PartNew配合使用，用于老年代。
    目标：获取最短回收停顿时间为目标的收集器。
    初始标记：这个过程十分快速，需要 「stop the world」，遍历所有的对象并且标记初始的gc root
    并发标记：这个过程可以和用户线程一起并发完成，所以对于系统进程的影响较小，主要的工作为在系统线程运行的时候通过gc root对于对象进行根节点枚举的操作，标记对象是否存活，注意这里的标记也是较为迅速和简单的，因为下一步还需要重新标记
    重新标记：需要 「stop the world」，这个阶段会继续完成上一个阶段的动作，对于上一个步骤标记的对象进行二次遍历，重新标记是否存活。
    并发清理：和用户线程一起并发，负责将没有Gc root引用的垃圾对象进行回收。
*** CMS缺点

*** G1垃圾回收算法
    基于标记整理算法，
    目标：将STW停顿的时间(-XX:MaxGCPauseMillis 默认200ms)和分布变成可预期以及可配置的。
    方案：堆不再分成连续的年轻代和老年代空间，而是划分为多个(通常是 2048个)可以存放对象的 (smaller heap regions)。每region都可能是 Eden区, Survivor区或者Old区
    辅助结构：
    过程：
    1. 转移暂停，清理年轻代
    2. 全局并发标记
    3. 混合转移暂停
*** 标记算法-三色标记法

*** Java对象初始化
* 高级
** Jdk高级工具
*** jstat
   观察GC情况，如：
   jstat -gcutil pid 2000
*** jmap
   查看heap情况，如查看存活对象列表：
   jmap -histo:live pid |grep com.company |less
   或者dump内存用来分析：
   jmap -F dump:live,format=b,file=test.bin [pid]
   jmap -dump:file=test.bin [pid]
*** jhat
   分析dump的堆文件，可以用jhat:
   jhat test.bin
   分析完成后可以用浏览器查看堆的情况,默认是http://localhost:7000 。
   这个工具的分析结果还比较原始，你还可以用Eclipse MAT插件进行图形化分析，或者IBM的Heap Analyzer.
*** jvisualvm
    JVM自带的性能分析和监控工具，怎么用？请自己看文档。
*** jconsole
    运行java程序时添加系统变量:
    -Dcom.sun.management.jmxremote.port=1090
    -Dcom.sun.management.jmxremote.ssl=false
    -Dcom.sun.management.jmxremote.authenticate=false
    然后打开jconsole，监听本地端口
*** jstack
   分析线程堆栈，当cpu被java程序消耗的比较多的时候，可以使用jstack工具来分析jvm进程
   1. 查找相关进程和线程
   用top命令获取进程pid，
   然后shirt+h，观察哪个线程CPU占用率最高(通常超过100%)，得到线程tid
   或者ps -MP [进程pid] -o THREAD,tid,time，列出进程下线程占用列表，得到线程tid
   2. 将tid转化为16进制
   python -c 'print hex([线程tid])'
   python>>hex([线程tid])
   3. 定位到相关堆栈的执行
   jstack -[fn:1]F [进程pid] | grep -A 100 [线程tid]
** Java
相关调优
*** 高CPU占用
    Java应用CPU占用过高，除了确实是计算密集型应用外，通常原因是因为死循环，利用linux下的系统工具和jdk工具可以帮助查找问题
    1. 运行top命令,发现进程43945的java程序CPU达到200%
    2. 运行ps -mp 43945 -o THREAD,tid,time(或者top后shirt+h也可以)，查看那个线程占用CPU过多,发现44011,45885两个线程
    3. 运行printf "%x\n" 44011，得到线程的16进制:abeb
    4. 运行jstack 43945 |grep abeb -A 100，查看线程dump堆栈信息
*** 高内存占用
    Java应用内存占用过高,通常表现在下面两种异常:
    1. java.lang.OutOfMemoryError: PermGen space
    2. java.lang.OutOfMemoryError: Java heap space

    问题查找步骤:
    1. 运行top命令,发现进程43945的java程序CPU达到200%
    2. 运行jmap -histo:live 43945，查看当前Java进程创建的活跃对象数目和占用内存大小
    3. 运行jmap -dump:live,format=b,file=dump.txt 43945导出内存占用情况
*** 系统假死



** JavaNIO
    JavaNIO实际上是Java New IO，来区别于以前的Java IO，一般也称之为Java非阻塞式IO
*** 阻塞式IO
    传统的Java IO是阻塞式的，即InputStream.read()方法时是阻塞的，当前线程处于等待状态，直到数据到来或超时才继续执行。

    阻塞式IO的服务端并发模型是:
    1. 服务端启动ServerSocket，执行到ServerSocket.accept()方法时处于阻塞状态，等待客户端连接
    2. 客户端连接过来后，服务端都会启动一个线程去处理该客户端的请求，这个线程也是阻塞的

    传统阻塞式IO的缺点:
    1. 当客户端多时，会创建大量的处理线程。且每个线程都要占用栈空间和一些CPU时间
    2. 阻塞可能带来频繁的上下文切换，且大部分上下文切换可能是无意义的
*** 非阻塞式IO
    JavaNIO提供了一种非阻塞的IO方式，

    非阻塞式IO的服务端并发模型如下(被称为reactor模式):
    1. 由一个专门的线程来处理所有的IO事件，并负责分发
    2. 事件驱动机制:事件到的时候触发，而不是同步的去监视事件。
    3. 线程通讯:线程之间通过wait,notify等方式通讯。保证每次上下文切换都是有意义的。减少无谓的线程切换。
*** 比较
    1. 面向流与面向缓冲
       Java NIO和IO之间第一个最大的区别是，IO是面向流的，NIO是面向缓冲区的。 Java IO面向流意味着每次从流中读一个或多个字节，直至读取所有字节，它们没有被缓存在任何地方。此外，它不能前后移动流中的数据。如果需要前后移动从流中读取的数据，需要先将它缓存到一个缓冲区。 Java NIO的缓冲导向方法略有不同。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动。这就增加了处理过程中的灵活性。但是，还需要检查是否该缓冲区中包含所有您需要处理的数据。而且，需确保当更多的数据读入缓冲区时，不要覆盖缓冲区里尚未处理的数据。
    2. 阻塞与非阻塞IO
       Java IO的各种流是阻塞的。这意味着，当一个线程调用read()或write()时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了。 Java NIO的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取。而不是保持线程阻塞，所以直至数据变的可以读取之前，该线程可以继续做其他的事情。 非阻塞写也是如此。一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。 线程通常将非阻塞IO的空闲时间用于在其它通道上执行IO操作，所以一个单独的线程现在可以管理多个输入和输出通道（channel）。
    3. 选择器(Selectors)
       Java NIO的选择器允许一个单独的线程来监视多个输入通道，你可以注册多个通道使用一个选择器，然后使用一个单独的线程来“选择”通道：这些通道里已经有可以处理的输入，或者选择已准备写入的通道。这种选择机制，使得一个单独的线程很容易来管理多个通道。

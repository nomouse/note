并发的概念
并发可以看作是操作系统内核用来运行多个应用程序的机制


线程和进程的区别
1、在引入线程的操作系统中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位。
2、进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率
3、进程和线程的主要差别在于它们是不同的操作系统资源管理方式，进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。

同步和异步
同步调用就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回，程序停留在此处直到结果返回再处理，此时线程仍处于运行状态。
异步调用和同步的概念相对，当一个异步过程调用发出后，调用者不能立刻得到结果，程序继续往下执行。实际处理这个调用的部件在完成后，通过状态、通知和回调来通知调用者。

阻塞和非阻塞
阻塞调用是指调用结果返回之前，当前线程会被挂起。函数只有在得到结果之后才会返回。
非阻塞调用和阻塞调用的概念相对应，指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回。

Unix下的并发编程的几种方式：
1、基于进程的并发
同步阻塞
2、基于多路复用的并发
同步非阻塞
3、基于线程的并发
同步非阻塞

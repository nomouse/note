* 概述
** 配置文件
   /etc/vimrc  全局配置
   ~/.vimrc    当前用户配置
** 常用设置
   set number   显示行号
** 乱码问题
*** 终极配置
    set enc=utf-8
    set fenc=utf-8
    set fencs=utf-8,usc-bom,euc-jp,gb18030,gbk,gb2312,cp936
*** 说明
    Vim和所有的流行文本编辑器一样，Vim 可以很好的编辑各种字符编码的文件，这当然包括 UCS-2、UTF-8 等流行的 Unicode 编码方式。
    Vim编码配置里面有3个选项，分别是encoding 、fileencodings、fileencoding 简写分别对应为enc、fencs、fenc。
    Vim 有四个跟字符编码方式有关的选项，encoding、fileencoding、fileencodings、termencoding (这些选项可能的取值请参考 Vim 在线帮助  :help encoding-names)，它们的意义如下:
    1. encoding: Vim 内部使用的字符编码方式，包括 Vim 的 buffer (缓冲区)、菜单文本、消息文本等。用户手册上建议只在 .vimrc 中改变它的值，事实上似乎也只有在 .vimrc 中改变它的值才有意义。
    2. fileencoding: Vim 中当前编辑的文件的字符编码方式，Vim 保存文件时也会将文件保存为这种字符编码方式 (不管是否新文件都如此)，网上是这样介绍的，
       但是我这样做在.vimrc中定义为utf-8似乎没有作用，只能在打开vim文件时手动设置才会起效，不知道什么原因。
    3. fileencodings: Vim 启动时会按照它所列出的字符编码方式逐一探测即将打开的文件的字符编码方式，并且将 fileencoding 设置为最终探测到的字符编码方式。
       因此最好将 Unicode 编码方式放到这个列表的最前面，将拉丁语系编码方式 latin1 放到最后面。
    4. termencoding: Vim 所工作的终端 (或者 Windows 的 Console 窗口) 的字符编码方式。
       这个选项在 Windows 下对我们常用的 GUI 模式的 gVim 无效，而对 Console 模式的 Vim 而言就是 Windows 控制台的代码页，并且通常我们不需要改变它。
    再来记录一下 Vim 的多字符编码方式支持是如何工作的。
    (1)Vim 启动，根据 .vimrc 中设置的 encoding 的值来设置 buffer、菜单文本、消息文的字符编码方式。
    (2)读取需要编辑的文件，根据 fileencodings 中列出的字符编码方式逐一探测该文件编码方式。并设置 fileencoding 为探测到看起来是正确的 字符编码方式,如果没有找到合适的编码，就用latin-1(ASCII)编码打开。
    (3) 对比 fileencoding 和 encoding 的值，若不同则调用 iconv 将文件内容转换为 encoding 所描述的字符编码方式，并且把转换后的内容放到为此文件开辟的 buffer 里，此时我们就可以开始编辑这个文件了。
    (4)编辑完成后保存文件时，再次对比 fileencoding 和 encoding 的值。若不同，再次调用 iconv 将即将保存的 buffer 中的文本转换为 fileencoding 所描述的字符编码方式，并保存到指定的文件中。

由于 Unicode 能够包含几乎所有的语言的字符，而且 Unicode 的 UTF-8 编码方式又是非常具有性价比的编码方式 (空间消耗比 UCS-2 小)，因此建议 encoding 的值设置为 utf-8。
这么做的另一个理由是 encoding 设置为 utf-8 时，Vim 自动探测文件的编码方式会更准确 (或许这个理由才是主要的 ;) 。
我们在中文 Windows 里编辑的文件，为了兼顾与其他软件的兼容性，文件编码还是设置为 GB2312/GBK 比较合适，
因此 fileencoding 建议设置为 chinese (chinese 是个别名，在 Unix 里表示 gb2312，在 Windows 里表示 cp936，也就是 GBK 的代码页)。
* 光标移动
   h               光标向左移动一个字符
   j               光标向下移动一个字符
   k               光标向上移动一个字符
   l               光标向右移动一个字符
   Ctrl+f          屏幕向前翻一页
   Ctrl+b          屏幕向后翻一页
   Ctrl+d          屏幕向前翻半页
   Ctrl+u          屏幕向前翻半页
   +                       光标移动到非空格符的下一列
   -                       光标移动到非空格符的上一列
   [N]<space>      按下数字后再按空格键，光标会向右移动这一行的n个字符。例如20<space>,则光标会向右移动20个字符
   0(HOME)         移动到这一行的第一个字符处
   $(END)          移动到这一行的最后一个字符处
   H               光标移动到这个屏幕最上方的那一行
   M               光标移动到这个屏幕中央的那一行
   L               光标移动到这个屏幕最下方的那一行
   G               光标移动到文件的最后一行?
   [N]G            移动到这个文件的第n行。例如20G，则会移动到这个文件的第20行（可配合:set?nu）
   [N]<Enter>      光标向下移动n行

   h ：光标左移一个字符
   l ：光标右移一个字符
   space：光标右移一个字符
   Backspace：光标左移一个字符
   k或Ctrl+p：光标上移一行
   j或Ctrl+n ：光标下移一行
   Enter ：光标下移一行
   w或W ：光标右移一个字至字首
   b或B ：光标左移一个字至字首
   e或E ：光标右移一个字至字尾
   ) ：光标移至句尾
   ( ：光标移至句首
   }：光标移至段落开头
   {：光标移至段落结尾
   nG：光标移至第n行首
   n+：光标下移n行
   n-：光标上移n行
   n$：光标移至第n行尾
   H ：光标移至屏幕顶行
   M ：光慉标移至屏幕中间行
   L ：光标移至屏幕最后行
   0：（注意是数字零）光标移至当前行首
   $：光标移至当前行尾
   n+        //向下跳n行
   n-         //向上跳n行
   nG        //跳到行号为n的行
   G           //跳至文件的底部

* 删除、复制、粘帖
"+y     复制
x       向后删除一个字符
X       向前删除一个字符
[N]x    向后删除n个字符
Dd      删除光标所在的那一整行
[N]dd   删除光标所在列的向下n列，例如，20dd则事删除20列
dG      删除光标所在列到最后一行的所有数据
d1G     删除光标所在行到第一行的所有数据
yy?		复制光标所在行
[N]yy?	复制光标所在列的向下n列，例如，20yy则是复制20列
y1G?	复制光标所在列到第一列的所有数据?yG?复制光标所在列到最后一列的所有数据?
p?		复制的数据粘贴在光标下一列
P		粘贴在光标上一列
J?		将光标所在列与下一列的数据结合成一列?
U?		恢复前一个动作（undo）

vim有12个粘贴板，分别是0、1、2、...、9、a、“、＋；用:reg命令可以查看各个粘贴板里的内容。在vim中简单用y只是复制到“（双引号)粘贴板里，同样用p粘贴的也是这个粘贴板里的内容；
要将vim的内容复制到某个粘贴板，需要退出编辑模式，进入正常模式后，选择要复制的内容，然后按"Ny（注意带引号）完成复制，其中N为粘贴板号(注意是按一下双引号然后按粘贴板号最后按y)，例如要把内容复制到粘贴板a，选中内容后按"ay就可以了，有两点需要说明一下：
“号粘贴板（临时粘贴板）比较特殊，直接按y就复制到这个粘贴板中了，直接按p就粘贴这个粘贴板中的内容；
+号粘贴板是系统粘贴板，用"+y将内容复制到该粘贴板后可以使用Ctrl＋V将其粘贴到其他文档（如firefox、gedit）中，同理，要把在其他地方用Ctrl＋C或右键复制的内容复制到vim中，需要在正常模式下按"+p；
要将vim某个粘贴板里的内容粘贴进来，需要退出编辑模式，在正常模式按"Np，其中N为粘贴板号，如上所述，可以按"5p将5号粘贴板里的内容粘贴进来，也可以按"+p将系统全局粘贴板里的内容粘贴进来。

* 查找替换

/word                  在光标之后查找一个名为word的字符串（常用）
word                   在光标之前查找一个名为word的字符串
:n1,n2s/word1/word2/g  在第n1与n2行之间查找word1这个字符串，并将该字符串替换为word2（常用）
:1,$s/ word1/word2/g   在第一行与最后一行之间查找word1这个字符串，并将该字符串替换为word2（常用）
:1,$s/ word1/word2/gc  在第一行与最后一行之间查找word1这个字符串，并将该字符串替换为word2，且在替换前显示提示符让用户确认(conform)（常用）
:%s/word1/word2/g      全局替换word1为word2,且不区分大小写

* 编辑模式
i,I?			插入：在当前光标所在处插入输入的文字，已存在?
a,A?			添加：由当前光标所在处的下一个字符开始输入，已存在的字符会向后退（常用）?
o,O?			插入新的一行：从光标所在行的下一行行首开始输入字符（常用）?
r,R?			替换：r会替换光标所指的那一个字符；R会一直替换光标所指的文字，直到按下Esc为止（常用）

Esc?			退出编辑模式，回到一般模式（常用）?命令行模式?:w?将编辑的数据写入硬盘文件中（常用）?
:w!?			若文件属性为只读，强制写入该文件?:q?退出vi，快捷方式为SHIFT+ZZ?
:q!?			若曾修改过文件，又不想保存，使用！为强制退出不保存文件，快捷方式为SHIFT+ZQ?
:wq?			保存后退出，若为:wq!，则为强制保存后退出（常用）?
:w[filename]?	将编辑数据保存为另一个文件（类似另存新文档）?
:r[filename]?	在编辑的数据中，读入另一个文件的数据。即将filename这个文件内容加到光标所在行的后面?
:set?nu?		显示行号，设定之后，会在每一行的前面显示该行的行号?
:set?nonu?		与ser?nu相反，为取消行号
* 高级
** 块操作
   1. ^ 到行头
   2. C-v 进入块操作选中多行
   3. I 行首插入
   4. Esc 退出块操作
** 宏录制
